{"version":3,"file":"index.cjs","sources":["../src/types/constants.ts","../src/utils/messages.ts","../src/core/driver/nodeUSBDriver.ts","../src/core/driver/usbDriverUtils.ts","../src/core/driver/webUSBDriver.ts","../src/utils/customPolyfills.ts","../src/sensors/baseSensor.ts","../src/sensors/heartRate/heartRateUtils.ts","../src/sensors/heartRate/heartRateSensorState.ts","../src/sensors/heartRate/heartRateScanState.ts","../src/sensors/antPlusBaseSensor.ts","../src/sensors/antPlusSensor.ts","../src/sensors/heartRate/heartRateSensor.ts","../src/sensors/antPlusScanner.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceUtils.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceSensorState.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceScanState.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceSensor.ts","../src/sensors/speedCadence/speedCadenceUtils.ts","../src/sensors/speedCadence/speedCadenceSensorState.ts","../src/sensors/speedCadence/speedCadenceScanState.ts","../src/sensors/speedCadence/speedCadenceSensor.ts","../src/sensors/speed/speedUtils.ts","../src/sensors/speed/speedSensorState.ts","../src/sensors/speed/speedScanState.ts","../src/sensors/speed/speedSensor.ts","../src/sensors/cadence/cadenceUtils.ts","../src/sensors/cadence/cadenceSensorState.ts","../src/sensors/cadence/cadenceScanState.ts","../src/sensors/cadence/cadenceSensor.ts","../src/sensors/bicyclePower/bicyclePowerUtils.ts","../src/sensors/bicyclePower/bicyclePowerSensorState.ts","../src/sensors/bicyclePower/bicyclePowerScanState.ts","../src/sensors/bicyclePower/bicyclePowerSensor.ts","../src/sensors/fitnessEquipment/fitnessEquipmentUtils.ts","../src/sensors/fitnessEquipment/fitnessEquipmentSensorState.ts","../src/sensors/fitnessEquipment/fitnessEquipmentScanState.ts","../src/sensors/fitnessEquipment/fitnessEquipmentSensor.ts","../src/sensors/muscleOxygen/muscleOxygenUtils.ts","../src/sensors/muscleOxygen/muscleOxygenSensorState.ts","../src/sensors/muscleOxygen/muscleOxygenScanState.ts","../src/sensors/muscleOxygen/muscleOxygenSensor.ts","../src/sensors/environment/environmentUtils.ts","../src/sensors/environment/environmentSensorState.ts","../src/sensors/environment/environmentScanState.ts","../src/sensors/environment/environmentSensor.ts","../src/sensors/bicyclePower/bicyclePowerScanner.ts","../src/sensors/cadence/cadenceScanner.ts","../src/sensors/environment/environmentScanner.ts","../src/sensors/fitnessEquipment/fitnessEquipmentScanner.ts","../src/core/nodeUsbSticks.ts","../src/sensors/heartRate/heartRateScanner.ts","../src/sensors/muscleOxygen/muscleOxygenScanner.ts","../src/sensors/speedCadence/speedCadenceScanner.ts","../src/sensors/speed/speedScanner.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceScanner.ts","../src/core/webUsbStick.ts"],"sourcesContent":["/**\n * A collection of constants used in the ANT+ protocol for wireless communication.\n * These constants define various message types, configuration parameters, events,\n * and capabilities used to control and manage channels, transmit data, and handle\n * protocol-specific operations.\n *\n * @class Constants\n * @see {@link https://www.thisisant.com/developer/resources/downloads#documents} for the ANT+ protocol documentation.\n */\nexport class Constants {\n    // Message Types\n    /**\n     * Represents a generic Radio Frequency (RF) message type used in the ANT+ protocol.\n     * @type {number}\n     */\n    static readonly MESSAGE_RF: number = 0x01;\n\n    /**\n     * Represents a synchronization message used to align data transmission.\n     * @type {number}\n     */\n    static readonly MESSAGE_TX_SYNC: number = 0xa4;\n\n    /**\n     * Default network number used by ANT+ devices.\n     * @type {number}\n     */\n    static readonly DEFAULT_NETWORK_NUMBER: number = 0x00;\n\n    // Configuration Messages\n    /**\n     * Unassigns a channel, making it available for reassignment or closing.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_UNASSIGN: number = 0x41;\n\n    /**\n     * Assigns a channel with a specific type and network number.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ASSIGN: number = 0x42;\n\n    /**\n     * Sets the unique identifier for a channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ID: number = 0x51;\n\n    /**\n     * Configures the message period for a channel, defining the frequency of data messages.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_PERIOD: number = 0x43;\n\n    /**\n     * Sets the timeout period for channel searching operations.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_SEARCH_TIMEOUT: number = 0x44;\n\n    /**\n     * Configures the frequency of the channel in the RF spectrum.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_FREQUENCY: number = 0x45;\n\n    /**\n     * Sets the transmission power level for a specific channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_TX_POWER: number = 0x60;\n\n    /**\n     * Sets the network key for secure communication between ANT+ devices.\n     * @type {number}\n     */\n    static readonly MESSAGE_NETWORK_KEY: number = 0x46;\n\n    /**\n     * Defines the transmit power for the device.\n     * @type {number}\n     */\n    static readonly MESSAGE_TX_POWER: number = 0x47;\n\n    /**\n     * Enables proximity search for devices within a specified range.\n     * @type {number}\n     */\n    static readonly MESSAGE_PROXIMITY_SEARCH: number = 0x71;\n\n    /**\n     * Enables extended receive mode for handling additional data.\n     * @type {number}\n     */\n    static readonly MESSAGE_ENABLE_RX_EXT: number = 0x66;\n\n    /**\n     * Configures the library settings for ANT+ communication.\n     * @type {number}\n     */\n    static readonly MESSAGE_LIB_CONFIG: number = 0x6e;\n\n    /**\n     * Opens a channel for RX scan mode, allowing the device to search for broadcasts.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_OPEN_RX_SCAN: number = 0x5b;\n\n    // Notifications\n    /**\n     * Indicates a startup event, typically sent after a device reset or initialization.\n     * @type {number}\n     */\n    static readonly MESSAGE_STARTUP: number = 0x6f;\n\n    // Control Messages\n    /**\n     * Resets the ANT+ device system.\n     * @type {number}\n     */\n    static readonly MESSAGE_SYSTEM_RESET: number = 0x4a;\n\n    /**\n     * Opens a communication channel for data transmission.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_OPEN: number = 0x4b;\n\n    /**\n     * Closes a previously opened communication channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_CLOSE: number = 0x4c;\n\n    /**\n     * Requests a specific operation or status update for a channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_REQUEST: number = 0x4d;\n\n    // Data Messages\n    /**\n     * Transmits broadcast data over an open channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_BROADCAST_DATA: number = 0x4e;\n\n    /**\n     * Sends acknowledged data that requires a response confirmation.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ACKNOWLEDGED_DATA: number = 0x4f;\n\n    /**\n     * Sends burst data packets over a channel, useful for high-throughput scenarios.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_BURST_DATA: number = 0x50;\n\n    // Channel Event Messages\n    /**\n     * Represents various events occurring on a channel, such as RX or TX completion.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_EVENT: number = 0x40;\n\n    // Requested Response Messages\n    /**\n     * Queries the status of a channel, returning details like state or assigned ID.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_STATUS: number = 0x52;\n\n    /**\n     * Retrieves the version of the ANT+ device software or protocol.\n     * @type {number}\n     */\n    static readonly MESSAGE_VERSION: number = 0x3e;\n\n    /**\n     * Retrieves the capabilities of the ANT+ device, such as supported features.\n     * @type {number}\n     */\n    static readonly MESSAGE_CAPABILITIES: number = 0x54;\n\n    /**\n     * Retrieves the unique serial number of the ANT+ device.\n     * @type {number}\n     */\n    static readonly MESSAGE_SERIAL_NUMBER: number = 0x61;\n\n    // Message Parameters\n    /**\n     * Channel type for two-way data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_TWOWAY_RECEIVE: number = 0x00;\n\n    /**\n     * Channel type for two-way data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_TWOWAY_TRANSMIT: number = 0x10;\n\n    /**\n     * Channel type for shared data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_SHARED_RECEIVE: number = 0x20;\n\n    /**\n     * Channel type for shared data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_SHARED_TRANSMIT: number = 0x30;\n\n    /**\n     * Channel type for one-way data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_ONEWAY_RECEIVE: number = 0x40;\n\n    /**\n     * Channel type for one-way data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_ONEWAY_TRANSMIT: number = 0x50;\n\n    /**\n     * Radio transmit power level: -20 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_MINUS20DB: number = 0x00;\n\n    /**\n     * Radio transmit power level: -10 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_MINUS10DB: number = 0x01;\n\n    /**\n     * Radio transmit power level: 0 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_0DB: number = 0x02;\n\n    /**\n     * Radio transmit power level: +4 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_PLUS4DB: number = 0x03;\n\n    // Event Codes\n    /**\n     * No error occurred in the response.\n     * @type {number}\n     */\n    static readonly RESPONSE_NO_ERROR: number = 0x00;\n\n    /**\n     * RX search timed out.\n     * @type {number}\n     */\n    static readonly EVENT_RX_SEARCH_TIMEOUT: number = 0x01;\n\n    /**\n     * RX failed.\n     * @type {number}\n     */\n    static readonly EVENT_RX_FAIL: number = 0x02;\n\n    /**\n     * TX completed successfully.\n     * @type {number}\n     */\n    static readonly EVENT_TX: number = 0x03;\n\n    /**\n     * Transfer RX failed.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_RX_FAILED: number = 0x04;\n\n    /**\n     * Transfer TX completed successfully.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_COMPLETED: number = 0x05;\n\n    /**\n     * Transfer TX failed.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_FAILED: number = 0x06;\n\n    /**\n     * Channel was closed.\n     * @type {number}\n     */\n    static readonly EVENT_CHANNEL_CLOSED: number = 0x07;\n\n    /**\n     * RX failed; channel will go to search.\n     * @type {number}\n     */\n    static readonly EVENT_RX_FAIL_GO_TO_SEARCH: number = 0x08;\n\n    /**\n     * Channel collision detected.\n     * @type {number}\n     */\n    static readonly EVENT_CHANNEL_COLLISION: number = 0x09;\n\n    /**\n     * Transfer TX started.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_START: number = 0x0a;\n\n    // Error and State Codes\n    /**\n     * Channel is in the wrong state for the requested operation.\n     * @type {number}\n     */\n    static readonly CHANNEL_IN_WRONG_STATE: number = 0x15;\n\n    /**\n     * Channel is not opened.\n     * @type {number}\n     */\n    static readonly CHANNEL_NOT_OPENED: number = 0x16;\n\n    /**\n     * Channel ID is not set.\n     * @type {number}\n     */\n    static readonly CHANNEL_ID_NOT_SET: number = 0x18;\n\n    /**\n     * Command to close all channels.\n     * @type {number}\n     */\n    static readonly CLOSE_ALL_CHANNELS: number = 0x19;\n\n    /**\n     * Transfer is currently in progress.\n     * @type {number}\n     */\n    static readonly TRANSFER_IN_PROGRESS: number = 0x1f;\n\n    /**\n     * Transfer sequence number error.\n     * @type {number}\n     */\n    static readonly TRANSFER_SEQUENCE_NUMBER_ERROR: number = 0x20;\n\n    /**\n     * Transfer is in an error state.\n     * @type {number}\n     */\n    static readonly TRANSFER_IN_ERROR: number = 0x21;\n\n    /**\n     * Message size exceeds allowed limit.\n     * @type {number}\n     */\n    static readonly MESSAGE_SIZE_EXCEEDS_LIMIT: number = 0x27;\n\n    /**\n     * Invalid message received.\n     * @type {number}\n     */\n    static readonly INVALID_MESSAGE: number = 0x28;\n\n    /**\n     * Invalid network number provided.\n     * @type {number}\n     */\n    static readonly INVALID_NETWORK_NUMBER: number = 0x29;\n\n    /**\n     * Invalid list ID provided.\n     * @type {number}\n     */\n    static readonly INVALID_LIST_ID: number = 0x30;\n\n    /**\n     * Invalid scan TX channel specified.\n     * @type {number}\n     */\n    static readonly INVALID_SCAN_TX_CHANNEL: number = 0x31;\n\n    /**\n     * Invalid parameter provided for a message or operation.\n     * @type {number}\n     */\n    static readonly INVALID_PARAMETER_PROVIDED: number = 0x33;\n\n    /**\n     * Event queue overflow occurred.\n     * @type {number}\n     */\n    static readonly EVENT_QUEUE_OVERFLOW: number = 0x35;\n\n    /**\n     * USB string write operation failed.\n     * @type {number}\n     */\n    static readonly USB_STRING_WRITE_FAIL: number = 0x70;\n\n    // Channel States\n    /**\n     * Channel is unassigned.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_UNASSIGNED: number = 0x00;\n\n    /**\n     * Channel is assigned.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_ASSIGNED: number = 0x01;\n\n    /**\n     * Channel is searching for another device.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_SEARCHING: number = 0x02;\n\n    /**\n     * Channel is tracking another device.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_TRACKING: number = 0x03;\n\n    // Capability Flags\n    /**\n     * Device has no receive channels.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_RECEIVE_CHANNELS: number = 0x01;\n\n    /**\n     * Device has no transmit channels.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_TRANSMIT_CHANNELS: number = 0x02;\n\n    /**\n     * Device has no receive message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_RECEIVE_MESSAGES: number = 0x04;\n\n    /**\n     * Device has no transmit message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_TRANSMIT_MESSAGES: number = 0x08;\n\n    /**\n     * Device has no acknowledged message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_ACKNOWLEDGED_MESSAGES: number = 0x10;\n\n    /**\n     * Device has no burst message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_BURST_MESSAGES: number = 0x20;\n\n    /**\n     * Device supports network communication.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NETWORK_ENABLED: number = 0x02;\n\n    /**\n     * Device serial number feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SERIAL_NUMBER_ENABLED: number = 0x08;\n\n    /**\n     * Per-channel transmit power adjustment enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED: number = 0x10;\n\n    /**\n     * Low priority search capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED: number = 0x20;\n\n    /**\n     * Script feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SCRIPT_ENABLED: number = 0x40;\n\n    /**\n     * Search list capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SEARCH_LIST_ENABLED: number = 0x80;\n\n    /**\n     * LED feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_LED_ENABLED: number = 0x01;\n\n    /**\n     * Extended messaging enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_EXT_MESSAGE_ENABLED: number = 0x02;\n\n    /**\n     * Scan mode enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SCAN_MODE_ENABLED: number = 0x04;\n\n    /**\n     * Proximity search capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_PROX_SEARCH_ENABLED: number = 0x10;\n\n    /**\n     * Extended channel assignment enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_EXT_ASSIGN_ENABLED: number = 0x20;\n\n    /**\n     * File share (ANT-FS) feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_FS_ANTFS_ENABLED: number = 0x40;\n\n    // Miscellaneous\n    /**\n     * Special value indicating that the timeout for an operation is set to never expire.\n     * @type {number}\n     */\n    static readonly TIMEOUT_NEVER: number = 0xff;\n}\n","import { Constants } from \"../types/constants.js\";\n\nexport class Messages {\n    static BUFFER_INDEX_MSG_LEN: number = 1;\n    static BUFFER_INDEX_MSG_TYPE: number = 2;\n    static BUFFER_INDEX_CHANNEL_NUM: number = 3;\n    static BUFFER_INDEX_MSG_DATA: number = 4;\n    static BUFFER_INDEX_EXT_MSG_BEGIN: number = 12;\n\n    static resetSystem(): Uint8Array {\n        const payload: number[] = [];\n        payload.push(0x00);\n        return this.buildMessage(payload, Constants.MESSAGE_SYSTEM_RESET);\n    }\n\n    static requestMessage(channel: number, messageId: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload.push(messageId);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_REQUEST);\n    }\n\n    static setNetworkKey(): Uint8Array {\n        const payload: number[] = [];\n        payload.push(Constants.DEFAULT_NETWORK_NUMBER);\n        payload.push(0xb9);\n        payload.push(0xa5);\n        payload.push(0x21);\n        payload.push(0xfb);\n        payload.push(0xbd);\n        payload.push(0x72);\n        payload.push(0xc3);\n        payload.push(0x45);\n        return this.buildMessage(payload, Constants.MESSAGE_NETWORK_KEY);\n    }\n\n    static assignChannel(channel: number, type = \"receive\"): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        if (type === \"receive\") {\n            payload.push(Constants.CHANNEL_TYPE_TWOWAY_RECEIVE);\n        } else if (type === \"receive_only\") {\n            payload.push(Constants.CHANNEL_TYPE_ONEWAY_RECEIVE);\n        } else if (type === \"receive_shared\") {\n            payload.push(Constants.CHANNEL_TYPE_SHARED_RECEIVE);\n        } else if (type === \"transmit\") {\n            payload.push(Constants.CHANNEL_TYPE_TWOWAY_TRANSMIT);\n        } else if (type === \"transmit_only\") {\n            payload.push(Constants.CHANNEL_TYPE_ONEWAY_TRANSMIT);\n        } else if (type === \"transmit_shared\") {\n            payload.push(Constants.CHANNEL_TYPE_SHARED_TRANSMIT);\n        } else {\n            throw new Error(\"type not allowed\");\n        }\n        payload.push(Constants.DEFAULT_NETWORK_NUMBER);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ASSIGN);\n    }\n\n    static setDevice(channel: number, deviceId: number, deviceType: number, transmissionType: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(deviceId, 2));\n        payload = payload.concat(this.intToLEHexArray(deviceType));\n        payload = payload.concat(this.intToLEHexArray(transmissionType));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ID);\n    }\n\n    static searchChannel(channel: number, timeout: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(timeout));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_SEARCH_TIMEOUT);\n    }\n\n    static setPeriod(channel: number, period: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(period));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_PERIOD);\n    }\n\n    static setFrequency(channel: number, frequency: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(frequency));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_FREQUENCY);\n    }\n\n    static setRxExt(): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(0));\n        payload = payload.concat(this.intToLEHexArray(1));\n        return this.buildMessage(payload, Constants.MESSAGE_ENABLE_RX_EXT);\n    }\n\n    static libConfig(channel: number, how: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(how));\n        return this.buildMessage(payload, Constants.MESSAGE_LIB_CONFIG);\n    }\n\n    static openRxScan(): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(0));\n        payload = payload.concat(this.intToLEHexArray(1));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_OPEN_RX_SCAN);\n    }\n\n    static openChannel(channel: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_OPEN);\n    }\n\n    static closeChannel(channel: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_CLOSE);\n    }\n\n    static unassignChannel(channel: number): Uint8Array {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_UNASSIGN);\n    }\n\n    static acknowledgedData(channel: number, payload: number[]): Uint8Array {\n        payload = this.intToLEHexArray(channel).concat(payload);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA);\n    }\n\n    static broadcastData(channel: number, payload: number[]): Uint8Array {\n        payload = this.intToLEHexArray(channel).concat(payload);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_BROADCAST_DATA);\n    }\n\n    static buildMessage(payload: number[] = [], messageId = 0x00): Uint8Array {\n        const message: number[] = [];\n        message.push(Constants.MESSAGE_TX_SYNC);\n        message.push(payload.length);\n        message.push(messageId);\n        payload.forEach((byte) => {\n            message.push(byte);\n        });\n        message.push(this.getChecksum(message));\n\n        return new Uint8Array(message);\n    }\n\n    static intToLEHexArray(int: number, numBytes = 1): number[] {\n        numBytes = numBytes || 1;\n        const a: number[] = [];\n        const hexString = this.decimalToHex(int, numBytes * 2);\n        for (let i = hexString.length - 2; i >= 0; i -= 2) {\n            a.push(parseInt(hexString.substr(i, 2), 16));\n        }\n        return a;\n    }\n\n    static decimalToHex(d: number, numDigits: number): string {\n        let hex = Number(d).toString(16);\n        numDigits = numDigits || 2;\n        while (hex.length < numDigits) {\n            hex = \"0\" + hex;\n        }\n\n        return hex;\n    }\n\n    static getChecksum(message: number[]): number {\n        let checksum = 0;\n        message.forEach((byte) => {\n            checksum = (checksum ^ byte) % 0xff;\n        });\n\n        return checksum;\n    }\n}\n","import { BaseSensor } from \"../../sensors/baseSensor\";\nimport { Constants } from \"../../types/constants\";\nimport { DebugOptions } from \"../../types/debugOptions\";\nimport { USBDriverBase } from \"../../types/usbDriverBase\";\nimport { Messages } from \"../../utils/messages\";\nimport EventEmitter from \"events\";\nimport usb, { LibUSBException } from \"usb\";\n\n/**\n * NodeUSBDriver class handles the connection and communication with USB devices using the node-usb library.\n * It manages device setup, communication, sensor attachment, and data processing.\n *\n * This class extends EventEmitter to handle events and implements the USBDriverBase interface.\n *\n * @extends EventEmitter\n * @implements USBDriverBase\n */\nexport class NodeUSBDriver extends EventEmitter implements USBDriverBase {\n    /**\n     * List of USB devices currently in use.\n     * Tracks all connected devices used by this driver.\n     *\n     * @type {usb.Device[]}\n     * @private\n     */\n    private static deviceInUse: usb.Device[] = [];\n\n    /**\n     * The USB device instance.\n     * Holds a reference to the connected USB device, if any.\n     *\n     * @type {usb.Device|undefined}\n     * @private\n     */\n    private device: usb.Device | undefined;\n\n    /**\n     * The USB interface of the device.\n     * Used to interact with the endpoints of the connected USB device.\n     *\n     * @type {usb.Interface|undefined}\n     * @private\n     */\n    private iface: usb.Interface | undefined;\n\n    /**\n     * Indicates if the kernel driver was detached.\n     * Marks whether the kernel driver was detached during setup for re-attachment upon disconnection.\n     *\n     * @type {boolean}\n     * @private\n     */\n    private detachedKernelDriver = false;\n\n    /**\n     * The input endpoint for reading data.\n     * Used for receiving data from the USB device.\n     *\n     * @type {(usb.InEndpoint & EventEmitter)|undefined}\n     * @private\n     */\n    private inEndpoint: (usb.InEndpoint & EventEmitter) | undefined;\n\n    /**\n     * The output endpoint for sending data.\n     * Used for sending data to the USB device.\n     *\n     * @type {(usb.OutEndpoint & EventEmitter)|undefined}\n     * @private\n     */\n    private outEndpoint: (usb.OutEndpoint & EventEmitter) | undefined;\n\n    /**\n     * Stores leftover data from previous reads.\n     * Used to buffer partial data when reading from the USB device.\n     *\n     * @type {Uint8Array|undefined}\n     * @private\n     */\n    private leftover: Uint8Array | undefined;\n\n    /**\n     * The number of channels currently used.\n     * Tracks how many channels are actively being used.\n     *\n     * @type {number}\n     */\n    usedChannels: number = 0;\n\n    /**\n     * List of attached sensors.\n     * Holds the list of sensors currently connected to the USB driver.\n     *\n     * @type {BaseSensor[]}\n     * @private\n     */\n    private attachedSensors: BaseSensor[] = [];\n\n    /**\n     * The maximum number of channels available for communication.\n     * Defines the total number of channels the device can handle.\n     *\n     * @type {number}\n     */\n    maxChannels: number = 0;\n\n    /**\n     * Indicates if the device can scan for channels.\n     * Represents whether the USB device has scanning capabilities.\n     *\n     * @type {boolean}\n     */\n    _canScan: boolean = false;\n\n    /**\n     * Defines whether to throw LibUSB exceptions when errors occur during USB communication.\n     * Default value is set to `false`.\n     *\n     * @type {boolean}\n     */\n    throwLibUSBException: boolean = false;\n\n    /**\n     * Creates an instance of NodeUSBDriver.\n     * Initializes the driver with vendor ID, product ID, and optional debug options.\n     *\n     * @param {number} idVendor - The vendor ID of the USB device.\n     * @param {number} idProduct - The product ID of the USB device.\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\n     *                                          Includes usbDebugLevel and throwLibUSBException.\n     *\n     * @example\n     * const driver = new NodeUSBDriver(0x1234, 0x5678, { usbDebugLevel: 2, throwLibUSBException: true });\n     */\n    constructor(\n        private idVendor: number,\n        private idProduct: number,\n        debugOptions: DebugOptions = {}\n    ) {\n        super();\n        this.setMaxListeners(50); // Set maximum number of listeners to 50\n        usb.usb.setDebugLevel(debugOptions.usbDebugLevel || 0); // Set USB debug level\n        this.throwLibUSBException = debugOptions.throwLibUSBException || false; // Set exception throwing option\n    }\n\n    /**\n     * Checks if a new sensor can be attached to the driver.\n     * It verifies whether the current number of used channels is less than the maximum available channels.\n     *\n     * @returns {Promise<boolean>} Resolves with true if a new sensor can be attached, otherwise false.\n     *\n     * @example\n     * const canAttach = await this.stick.canAttach();\n     * if (canAttach) {\n     *   console.log(\"A new sensor can be attached.\");\n     * } else {\n     *   console.log(\"Cannot attach sensor: Maximum number of channels reached.\");\n     * }\n     */\n    async canAttach(): Promise<boolean> {\n        return Promise.resolve(this.usedChannels < this.maxChannels);\n    }\n\n    /**\n     * Checks if the device can scan for channels.\n     *\n     * @returns {Promise<boolean>} Resolves with true if the device can scan, otherwise false.\n     */\n    async canScan(): Promise<boolean> {\n        return Promise.resolve(this._canScan);\n    }\n\n    /**\n     * Opens a connection to the USB device and sets up endpoints for communication.\n     *\n     * @returns {Promise<boolean>} Resolves with true if the device is successfully opened, otherwise false.\n     * @example\n     * const driver = new NodeUSBDriver(1234, 5678);\n     * driver.open().then((result) => {\n     *   if (result) {\n     *     console.log(\"Device successfully opened\");\n     *   } else {\n     *     console.error(\"Failed to open device\");\n     *   }\n     * });\n     */\n    async open(): Promise<boolean> {\n        const devices = this.getDevices();\n\n        while (devices.length) {\n            try {\n                const device = devices.shift();\n                if (!device) {\n                    continue;\n                }\n\n                this.device = device;\n                this.device.open();\n                this.iface = this.device.interfaces![0];\n\n                try {\n                    if (this.iface && this.iface.isKernelDriverActive()) {\n                        this.detachedKernelDriver = true;\n                        this.iface.detachKernelDriver();\n                    }\n                } catch {\n                    // Ignore kernel driver errors\n                }\n\n                this.iface.claim();\n                break;\n            } catch (error) {\n                if (error && this.throwLibUSBException) {\n                    const errno = (error as LibUSBException).errno;\n                    switch (errno) {\n                        case usb.usb.LIBUSB_ERROR_ACCESS:\n                            throw new Error(\"LIBUSB_ERROR_ACCESS: Access denied (insufficient permissions)\");\n                        case usb.usb.LIBUSB_ERROR_NO_DEVICE:\n                            throw new Error(\"LIBUSB_ERROR_NO_DEVICE: Device has been disconnected\");\n                        case usb.usb.LIBUSB_ERROR_BUSY:\n                            throw new Error(\"LIBUSB_ERROR_BUSY: Resource busy\");\n                        default:\n                            console.error(\"Unknown LIBUSB error:\", error);\n                            break;\n                    }\n                } else {\n                    // Ignore errors and try with the next device\n                }\n\n                if (this.device) {\n                    this.device.close();\n                }\n                this.device = undefined;\n                this.iface = undefined;\n            }\n        }\n\n        if (!this.device) {\n            return Promise.resolve(false);\n        }\n\n        NodeUSBDriver.deviceInUse.push(this.device);\n\n        if (!this.iface) {\n            throw new Error(\"Interface not initialized.\");\n        }\n\n        this.inEndpoint = this.iface.endpoints[0] as usb.InEndpoint;\n        this.inEndpoint.on(\"data\", (data: Uint8Array) => {\n            this.onData(data).catch((error) => {\n                console.error(error);\n            });\n        });\n\n        this.inEndpoint.on(\"error\", (err: Error) => {\n            console.error(\"ERROR RECV: \", err);\n        });\n\n        this.inEndpoint.on(\"end\", () => {\n            //console.info(\"STOP RECV\");\n        });\n\n        this.inEndpoint.startPoll();\n\n        this.outEndpoint = this.iface.endpoints[1] as usb.OutEndpoint;\n\n        await this.reset();\n\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Closes the connection to the USB device and releases the interface.\n     *\n     * @returns {Promise<void>} Resolves when the device is closed.\n     * @example\n     * const driver = new NodeUSBDriver(1234, 5678);\n     * driver.open().then(() => {\n     *   driver.close().then(() => console.log(\"Device closed\"));\n     * });\n     */\n    async close(): Promise<void> {\n        await this.detachAll();\n\n        if (this.inEndpoint) {\n            this.inEndpoint.stopPoll(() => {\n                if (this.iface) {\n                    this.iface.release(true, () => {\n                        if (this.detachedKernelDriver) {\n                            this.detachedKernelDriver = false;\n                            try {\n                                this.iface?.attachKernelDriver();\n                            } catch {\n                                // Ignore kernel driver errors\n                            }\n                        }\n                        this.iface = undefined;\n                        if (this.device) {\n                            this.device.reset(() => {\n                                this.device?.close();\n                                this.emit(\"shutdown\");\n                                const devIdx = NodeUSBDriver.deviceInUse.indexOf(this.device!);\n                                if (devIdx >= 0) {\n                                    NodeUSBDriver.deviceInUse.splice(devIdx, 1);\n                                }\n                                if (usb.usb.listenerCount(\"attach\")) {\n                                    usb.usb.emit(\"attach\", this.device!);\n                                }\n                                this.device = undefined;\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * Reads data from the USB device and processes it.\n     *\n     * @param {Uint8Array} data - The data received from the USB device.\n     * @returns {Promise<void>} Resolves when the data has been processed.\n     * @example\n     * const data = new Uint8Array([0x01, 0x02, 0x03]);\n     * driver.read(data).then(() => console.log(\"Data processed\"));\n     */\n    async read(data: Uint8Array): Promise<void> {\n        const dataView = new DataView(data.buffer);\n        const messageId = dataView.getUint8(2);\n\n        if (messageId === Constants.MESSAGE_STARTUP) {\n            await this.write(Messages.requestMessage(0, Constants.MESSAGE_CAPABILITIES));\n        } else if (messageId === Constants.MESSAGE_CAPABILITIES) {\n            this.maxChannels = dataView.getUint8(3);\n            this._canScan = (dataView.getUint8(7) & 0x06) === 0x06;\n            await this.write(Messages.setNetworkKey());\n        } else if (messageId === Constants.MESSAGE_CHANNEL_EVENT && dataView.getUint8(4) === Constants.MESSAGE_NETWORK_KEY) {\n            this.emit(\"startup\", data);\n        } else {\n            this.emit(\"read\", data);\n        }\n    }\n\n    /**\n     * Writes data to the USB device.\n     *\n     * @param {Uint8Array} data - The data to be sent to the USB device.\n     * @returns {Promise<void>} Resolves when the data has been written.\n     * @example\n     * const data = new Uint8Array([0x01, 0x02, 0x03]);\n     * driver.write(data).then(() => console.log(\"Data sent\"));\n     */\n    async write(data: Uint8Array): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            if (this.outEndpoint) {\n                this.outEndpoint.transfer(Buffer.from(data), (error) => {\n                    if (error) {\n                        console.error(\"ERROR SEND: \", error);\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Resets the device and its channels, and sends a reset message to the system.\n     *\n     * @returns {Promise<void>} Resolves when the reset is completed.\n     * @example\n     * driver.reset().then(() => console.log(\"Device reset\"));\n     */\n    async reset(): Promise<void> {\n        await this.detachAll();\n        this.maxChannels = 0;\n        this.usedChannels = 0;\n        await this.write(Messages.resetSystem());\n    }\n\n    /**\n     * Attaches a sensor to the driver and assigns it a channel.\n     *\n     * @param {BaseSensor} sensor - The sensor to attach.\n     * @param {boolean} forScan - Whether the sensor is being attached for scanning.\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully attached, otherwise false.\n     * @example\n     * const sensor = new BaseSensor();\n     * driver.attach(sensor, true).then((attached) => {\n     *   if (attached) console.log(\"Sensor attached\");\n     * });\n     */\n    async attach(sensor: BaseSensor, forScan: boolean): Promise<boolean> {\n        if (this.usedChannels < 0) {\n            return Promise.resolve(false);\n        }\n\n        if (forScan && this.usedChannels !== 0) {\n            return Promise.resolve(false);\n        }\n\n        if (!forScan && this.maxChannels <= this.usedChannels) {\n            return Promise.resolve(false);\n        }\n\n        this.usedChannels = forScan ? -1 : this.usedChannels + 1;\n        this.attachedSensors.push(sensor);\n\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Detaches a sensor from the driver.\n     *\n     * @param {BaseSensor} sensor - The sensor to detach.\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully detached, otherwise false.\n     * @example\n     * const sensor = new BaseSensor();\n     * driver.detach(sensor).then((detached) => {\n     *   if (detached) console.log(\"Sensor detached\");\n     * });\n     */\n    async detach(sensor: BaseSensor): Promise<boolean> {\n        const idx = this.attachedSensors.indexOf(sensor);\n        if (idx < 0) {\n            return Promise.resolve(false);\n        }\n\n        this.usedChannels = this.usedChannels < 0 ? 0 : this.usedChannels - 1;\n        this.attachedSensors.splice(idx, 1);\n\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Checks if a USB device is present.\n     *\n     * @returns {Promise<boolean>} Resolves with true if a device is present, otherwise false.\n     */\n    async isPresent(): Promise<boolean> {\n        return Promise.resolve(this.getDevices().length > 0);\n    }\n\n    /**\n     * Checks if the driver is currently scanning.\n     *\n     * @returns {Promise<boolean>} Resolves with true if the driver is scanning, otherwise false.\n     */\n    async isScanning(): Promise<boolean> {\n        return Promise.resolve(this.usedChannels === -1);\n    }\n\n    /**\n     * Retrieves a list of USB devices matching the specified vendor and product IDs.\n     *\n     * @private\n     * @returns {usb.usb.Device[]} An array of USB devices that match the specified criteria.\n     */\n    private getDevices(): usb.usb.Device[] {\n        const allDevices = usb.getDeviceList();\n        return allDevices.filter((d) => d.deviceDescriptor.idVendor === this.idVendor && d.deviceDescriptor.idProduct === this.idProduct).filter((d) => NodeUSBDriver.deviceInUse.indexOf(d) === -1);\n    }\n\n    /**\n     * Detaches all sensors from the USB driver.\n     *\n     * @private\n     * @returns {Promise<void>} Resolves when all sensors are detached.\n     */\n    private async detachAll(): Promise<void> {\n        const copy = this.attachedSensors;\n        for (const sensor of copy) {\n            await sensor.detach();\n        }\n    }\n\n    /**\n     * Handles data received from the USB device and processes the messages.\n     *\n     * @private\n     * @param {Uint8Array} data - The data received from the USB device.\n     * @returns {Promise<void>} Resolves when the data has been processed.\n     */\n    private async onData(data: Uint8Array) {\n        if (!data.length) {\n            return;\n        }\n\n        if (this.leftover) {\n            data = this.concatUint8Arrays(this.leftover, data);\n            this.leftover = undefined;\n        }\n\n        const dataView = new DataView(data.buffer);\n\n        if (dataView.getUint8(0) !== 0xa4) {\n            throw new Error(\"SYNC missing\");\n        }\n\n        const len = data.length;\n        let beginBlock = 0;\n        while (beginBlock < len) {\n            if (beginBlock + 1 === len) {\n                this.leftover = data.slice(beginBlock);\n                break;\n            }\n            const blockLen = dataView.getUint8(beginBlock + 1);\n            const endBlock = beginBlock + blockLen + 4;\n            if (endBlock > len) {\n                this.leftover = data.slice(beginBlock);\n                break;\n            }\n            const readData = data.slice(beginBlock, endBlock);\n            await this.read(readData);\n            beginBlock = endBlock;\n        }\n    }\n\n    /**\n     * Concatenates two Uint8Array objects into one.\n     *\n     * @private\n     * @param {Uint8Array} arr1 - The first array.\n     * @param {Uint8Array} arr2 - The second array.\n     * @returns {Uint8Array} The concatenated result.\n     */\n    private concatUint8Arrays(arr1: Uint8Array, arr2: Uint8Array): Uint8Array {\n        const result = new Uint8Array(arr1.length + arr2.length);\n        result.set(arr1, 0);\n        result.set(arr2, arr1.length);\n        return result;\n    }\n}\n","/**\n * An array of objects representing supported hardware devices, each identified by a vendor ID and product ID.\n * This array is used to filter and identify specific USB devices that are supported by the system.\n *\n * @type {Array<{ vendorId: number, productId: number }>}\n *\n * @example\n * // Example of accessing the supported hardware list\n * console.log(supportHardware);\n * // Output: [{ vendorId: 0x0fcf, productId: 0x1008 }, { vendorId: 0x0fcf, productId: 0x1009 }]\n */\nexport const supportHardware: Array<{ vendorId: number; productId: number }> = [\n    { vendorId: 0x0fcf, productId: 0x1008 }, // Device GarminStick2\n    { vendorId: 0x0fcf, productId: 0x1009 }, // Device GarminStick3\n];\n","import { BaseSensor } from \"../../sensors/baseSensor\";\nimport { USBDriverBase } from \"../../types/usbDriverBase\";\nimport EventEmitter from \"events\";\nimport { supportHardware } from \"./usbDriverUtils\";\nimport { Messages } from \"../../utils/messages\";\nimport { Constants } from \"../../types/constants\";\n\n/**\n * WebUSBDriver is a class that manages the connection and communication with USB devices using the WebUSB API.\n * It handles device setup, communication, and sensor attachment.\n *\n * @extends EventEmitter\n * @implements USBDriverBase\n */\nexport class WebUSBDriver extends EventEmitter implements USBDriverBase {\n    /**\n     * Stores the USB devices currently in use.\n     * @type {USBDevice[]}\n     * @private\n     */\n    private static deviceInUse: USBDevice[] = [];\n\n    /**\n     * The current USB device.\n     * @type {USBDevice|undefined}\n     * @private\n     */\n    private device: USBDevice | undefined;\n\n    /**\n     * The USB interface of the connected device.\n     * @type {USBInterface|undefined}\n     * @private\n     */\n    private iface: USBInterface | undefined;\n\n    /**\n     * The input endpoint for communication.\n     * @type {USBEndpoint|undefined}\n     * @private\n     */\n    private inEndpoint: USBEndpoint | undefined;\n\n    /**\n     * The output endpoint for communication.\n     * @type {USBEndpoint|undefined}\n     * @private\n     */\n    private outEndpoint: USBEndpoint | undefined;\n\n    /**\n     * Stores any leftover data from previous USB reads.\n     * @type {Uint8Array|undefined}\n     * @private\n     */\n    private leftover: Uint8Array | undefined;\n\n    /**\n     * The number of channels currently used.\n     * @type {number}\n     */\n    usedChannels: number = 0;\n\n    /**\n     * The sensors attached to the driver.\n     * @type {BaseSensor[]}\n     * @private\n     */\n    private attachedSensors: BaseSensor[] = [];\n\n    /**\n     * Controller for aborting asynchronous operations.\n     * @type {AbortController}\n     * @private\n     */\n    private abortController: AbortController;\n\n    /**\n     * Signal for aborting asynchronous operations.\n     * @type {AbortSignal}\n     * @private\n     */\n    private signal: AbortSignal;\n\n    /**\n     * The maximum number of channels available for communication.\n     * @type {number}\n     */\n    maxChannels: number = 0;\n\n    /**\n     * Indicates whether the device can scan.\n     * @type {boolean}\n     */\n    _canScan: boolean = false;\n\n    /**\n     * Initializes the WebUSBDriver instance, setting up the abort controller and signal.\n     */\n    constructor() {\n        super();\n        this.setMaxListeners(50);\n        this.abortController = new AbortController();\n        this.signal = this.abortController.signal;\n    }\n\n    /**\n     * Checks if a new sensor can be attached to the driver.\n     * It verifies whether the current number of used channels is less than the maximum available channels.\n     *\n     * @returns {Promise<boolean>} Resolves with true if a new sensor can be attached, otherwise false.\n     *\n     * @example\n     * const canAttach = await this.stick.canAttach();\n     * if (canAttach) {\n     *   console.log(\"A new sensor can be attached.\");\n     * } else {\n     *   console.log(\"Cannot attach sensor: Maximum number of channels reached.\");\n     * }\n     */\n    async canAttach(): Promise<boolean> {\n        return Promise.resolve(this.usedChannels < this.maxChannels);\n    }\n\n    /**\n     * Checks if the device can scan for channels.\n     *\n     * @returns {Promise<boolean>} Resolves with true if the device can scan, otherwise false.\n     */\n    async canScan(): Promise<boolean> {\n        return Promise.resolve(this._canScan);\n    }\n\n    /**\n     * Opens a connection to the USB device and initializes the endpoints.\n     *\n     * @returns {Promise<boolean>} Resolves with true if the device was successfully opened, otherwise false.\n     */\n    public async open(): Promise<boolean> {\n        try {\n            if (!this.device) {\n                this.device = await navigator.usb.requestDevice({ filters: supportHardware });\n            }\n\n            await this.device.open();\n            this.iface = this.device.configuration?.interfaces[0];\n\n            if (!this.iface) {\n                throw new Error(\"No interface configuration found.\");\n            }\n\n            await this.device.claimInterface(this.iface.interfaceNumber);\n\n            WebUSBDriver.deviceInUse.push(this.device);\n\n            this.inEndpoint = this.iface.alternate.endpoints.find((e) => e.direction === \"in\");\n            this.outEndpoint = this.iface.alternate.endpoints.find((e) => e.direction === \"out\");\n\n            if (!this.inEndpoint || !this.outEndpoint) {\n                throw new Error(\"In or Out endpoint not found.\");\n            }\n\n            await this.reset();\n            await this.readLoop();\n\n            return true;\n        } catch (error) {\n            console.log(error);\n            await this.close();\n            return false;\n        }\n    }\n\n    /**\n     * Continuously reads data from the USB device.\n     * Recursively calls itself after each read until aborted.\n     *\n     * @private\n     * @returns {Promise<void>} Resolves when the read loop is completed or aborted.\n     */\n    private async readLoop(): Promise<void> {\n        if (this.signal.aborted || !this.inEndpoint) {\n            return;\n        }\n\n        try {\n            const result = await this.device?.transferIn(this.inEndpoint.endpointNumber, this.inEndpoint.packetSize);\n            if (!result || !result.data) {\n                return this.readLoop();\n            }\n\n            let buffer = new Uint8Array(result.data.buffer);\n\n            if (this.leftover) {\n                buffer = this.concatUint8Arrays(this.leftover, buffer);\n                this.leftover = undefined;\n            }\n\n            const dataView = new DataView(buffer.buffer);\n\n            if (dataView.getUint8(0) !== 0xa4) {\n                console.error(\"SYNC missing\");\n                return this.readLoop();\n            }\n\n            let beginBlock = 0;\n            const len = buffer.length;\n\n            while (beginBlock < len) {\n                if (beginBlock + 1 === len) {\n                    this.leftover = buffer.slice(beginBlock);\n                    break;\n                }\n\n                const blockLen = dataView.getUint8(beginBlock + 1);\n                const endBlock = beginBlock + blockLen + 4;\n\n                if (endBlock > len) {\n                    this.leftover = buffer.slice(beginBlock);\n                    break;\n                }\n\n                const readData = buffer.slice(beginBlock, endBlock);\n                await this.read(readData);\n                beginBlock = endBlock;\n            }\n        } catch (error) {\n            if (!this.signal.aborted) {\n                throw error;\n            }\n        }\n\n        return this.readLoop();\n    }\n\n    /**\n     * Closes the connection to the USB device and cleans up.\n     *\n     * @returns {Promise<void>} Resolves when the device is closed.\n     */\n    public async close(): Promise<void> {\n        this.cancelReadLoop();\n        await this.detachAll();\n\n        if (this.device) {\n            try {\n                await this.device.close();\n            } catch (error) {\n                console.error(\"Error closing device:\", error);\n            }\n\n            const devIdx = WebUSBDriver.deviceInUse.indexOf(this.device);\n            if (devIdx >= 0) {\n                WebUSBDriver.deviceInUse.splice(devIdx, 1);\n            }\n\n            this.emit(\"shutdown\");\n            this.device = undefined;\n        }\n    }\n\n    /**\n     * Cancels the current read loop by aborting the signal.\n     */\n    public cancelReadLoop() {\n        if (!this.signal.aborted) {\n            this.abortController.abort();\n            console.log(\"Read loop abort requested.\");\n        }\n    }\n\n    /**\n     * Processes the data received from the USB device.\n     *\n     * @param {Uint8Array} data The data received from the USB device.\n     * @returns {Promise<void>} Resolves when the data has been processed.\n     */\n    public async read(data: Uint8Array): Promise<void> {\n        const dataView = new DataView(data.buffer);\n        const messageId = dataView.getUint8(2);\n\n        if (messageId === Constants.MESSAGE_STARTUP) {\n            await this.write(Messages.requestMessage(0, Constants.MESSAGE_CAPABILITIES));\n        } else if (messageId === Constants.MESSAGE_CAPABILITIES) {\n            this.maxChannels = dataView.getUint8(3);\n            this._canScan = (dataView.getUint8(7) & 0x06) === 0x06;\n            await this.write(Messages.setNetworkKey());\n        } else if (messageId === Constants.MESSAGE_CHANNEL_EVENT && dataView.getUint8(4) === Constants.MESSAGE_NETWORK_KEY) {\n            this.emit(\"startup\", data);\n        } else {\n            this.emit(\"read\", data);\n        }\n    }\n\n    /**\n     * Writes data to the USB device.\n     *\n     * @param {Uint8Array} data The data to be sent to the USB device.\n     * @returns {Promise<void>} Resolves when the data has been written.\n     */\n    public async write(data: Uint8Array): Promise<void> {\n        if (this.device && this.outEndpoint) {\n            await this.device.transferOut(this.outEndpoint.endpointNumber, data);\n        }\n    }\n\n    /**\n     * Resets the device and channels, and sends a reset message to the system.\n     *\n     * @returns {Promise<void>} Resolves when the reset is completed.\n     */\n    public async reset(): Promise<void> {\n        await this.detachAll();\n        this.maxChannels = 0;\n        this.usedChannels = 0;\n        await this.write(Messages.resetSystem());\n    }\n\n    /**\n     * Attaches a sensor to the driver and assigns it a channel.\n     *\n     * @param {BaseSensor} sensor The sensor to attach.\n     * @param {boolean} forScan Whether the sensor is being attached for scanning.\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully attached, otherwise false.\n     */\n    public async attach(sensor: BaseSensor, forScan: boolean): Promise<boolean> {\n        if (this.usedChannels < 0) {\n            return Promise.resolve(false);\n        }\n\n        if (forScan && this.usedChannels !== 0) {\n            return Promise.resolve(false);\n        }\n        if (!forScan && this.maxChannels <= this.usedChannels) {\n            return Promise.resolve(false);\n        }\n\n        this.usedChannels = forScan ? -1 : this.usedChannels + 1;\n        this.attachedSensors.push(sensor);\n\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Detaches a sensor from the driver.\n     *\n     * @param {BaseSensor} sensor The sensor to detach.\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully detached, otherwise false.\n     */\n    public async detach(sensor: BaseSensor): Promise<boolean> {\n        const idx = this.attachedSensors.indexOf(sensor);\n        if (idx < 0) {\n            return Promise.resolve(false);\n        }\n\n        this.usedChannels = this.usedChannels < 0 ? 0 : this.usedChannels - 1;\n        this.attachedSensors.splice(idx, 1);\n\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Checks if a device is currently connected.\n     *\n     * @returns {Promise<boolean>} Resolves with true if a device is present, otherwise false.\n     */\n    public async isPresent(): Promise<boolean> {\n        return Promise.resolve(!!this.device);\n    }\n\n    /**\n     * Checks if the device is currently scanning.\n     *\n     * @returns {Promise<boolean>} Resolves with true if the device is scanning, otherwise false.\n     */\n    public async isScanning(): Promise<boolean> {\n        return Promise.resolve(this.usedChannels === -1);\n    }\n\n    /**\n     * Detaches all sensors from the driver.\n     *\n     * @private\n     * @returns {Promise<void>} Resolves when all sensors have been detached.\n     */\n    private async detachAll(): Promise<void> {\n        for (const sensor of this.attachedSensors.slice()) {\n            await sensor.detach();\n        }\n\n        this.attachedSensors = [];\n    }\n\n    /**\n     * Concatenates two Uint8Array objects into one.\n     *\n     * @private\n     * @param {Uint8Array} arr1 The first array.\n     * @param {Uint8Array} arr2 The second array.\n     * @returns {Uint8Array} The concatenated result.\n     */\n    private concatUint8Arrays(arr1: Uint8Array, arr2: Uint8Array): Uint8Array {\n        const result = new Uint8Array(arr1.length + arr2.length);\n        result.set(arr1, 0);\n        result.set(arr2, arr1.length);\n        return result;\n    }\n}\n","/**\n * A polyfill for `process.nextTick`, providing cross-platform compatibility.\n * In Node.js, it uses `process.nextTick`. In browsers, it falls back to\n * `setImmediate` if available, or `setTimeout` as a last resort.\n *\n * This function ensures that the provided callback function is executed asynchronously\n * after the current execution stack, similar to how `process.nextTick` works in Node.js.\n *\n * @param {() => void} fn - The callback function to execute asynchronously.\n *\n * @returns {void} No return value; the function is executed asynchronously.\n *\n * @example\n * nextTick(() => {\n *   console.log(\"This runs asynchronously after the current stack.\");\n * });\n */\nexport function nextTick(fn: () => void): void {\n    if (typeof process !== \"undefined\" && typeof process.nextTick === \"function\") {\n        // In Node.js, use process.nextTick\n        process.nextTick(fn);\n    } else if (typeof setImmediate === \"function\") {\n        // If setImmediate is available (some browsers, IE/Edge), use it\n        setImmediate(fn);\n    } else {\n        // Fallback for browsers and other environments: use setTimeout with 0 delay\n        setTimeout(fn, 0);\n    }\n}\n","import { EventEmitter } from \"events\";\nimport { SendCallback } from \"../types/sendCallback.js\";\nimport { Constants } from \"../types/constants.js\";\nimport { Messages } from \"../utils/messages.js\";\nimport { Status } from \"../types/status.js\";\nimport { USBDriverBase } from \"../types/usbDriverBase.js\";\nimport { nextTick } from \"../utils/customPolyfills.js\";\n\n/**\n * Abstract base class for sensors that communicates over a USB connection.\n * Extends EventEmitter to handle various events related to sensor data and status.\n */\nexport abstract class BaseSensor extends EventEmitter {\n    channel: number | undefined;\n    deviceId!: number;\n    transmissionType!: number;\n\n    private messageQueue: { msg: Uint8Array; cbk?: SendCallback }[] = [];\n\n    protected decodeDataCbk: ((data: DataView) => Promise<void>) | undefined;\n    protected statusCbk: ((status: Status) => Promise<boolean>) | undefined;\n\n    /**\n     * Abstract method to update the state of the sensor.\n     * Must be implemented by subclasses.\n     *\n     * @param {number} deviceId - The device ID to update.\n     * @param {Uint8Array} data - The data buffer containing the state information.\n     */\n    protected abstract updateState(deviceId: number, data: DataView): void;\n\n    /**\n     * Creates an instance of BaseSensor.\n     *\n     * @param {USBDriverBase} stick - The USB driver used for communication with the sensor.\n     */\n    constructor(private stick: USBDriverBase) {\n        super();\n        stick.on(\"read\", (data: Uint8Array) => {\n            this.handleEventMessages(data).catch((error) => {\n                console.error(error);\n            });\n        });\n    }\n\n    /**\n     * Starts scanning for devices of the specified type at a given frequency.\n     *\n     * @param {string} type - The type of device to scan for.\n     * @param {number} frequency - The frequency at which to scan.\n     *\n     * @throws Will throw an error if already attached or if the stick cannot scan.\n     */\n    protected async scan(type: string, frequency: number): Promise<void> {\n        if (this.channel !== undefined) {\n            throw new Error(\"Already attached\");\n        }\n\n        if (!this.stick.canScan) {\n            throw new Error(\"Stick cannot scan\");\n        }\n\n        const channel = 0;\n\n        const onStatus = async (status: Status) => {\n            switch (status.msg) {\n                case Constants.MESSAGE_RF:\n                    // Handle various message statuses\n                    switch (status.code) {\n                        case Constants.EVENT_CHANNEL_CLOSED:\n                        case Constants.EVENT_RX_FAIL_GO_TO_SEARCH:\n                            await this.write(Messages.unassignChannel(channel));\n                            return true;\n                        case Constants.EVENT_TRANSFER_TX_COMPLETED:\n                        case Constants.EVENT_TRANSFER_TX_FAILED:\n                        case Constants.EVENT_RX_FAIL:\n                        case Constants.INVALID_SCAN_TX_CHANNEL: {\n                            const mc = this.messageQueue.shift();\n                            if (mc && mc.cbk) {\n                                mc.cbk(status.code === Constants.EVENT_TRANSFER_TX_COMPLETED);\n                            }\n                            if (this.messageQueue.length) {\n                                await this.write(this.messageQueue[0].msg);\n                            }\n                            return true;\n                        }\n                        default:\n                            break;\n                    }\n                    break;\n                case Constants.MESSAGE_CHANNEL_ASSIGN:\n                    await this.write(Messages.setDevice(channel, 0, 0, 0));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ID:\n                    await this.write(Messages.setFrequency(channel, frequency));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_FREQUENCY:\n                    await this.write(Messages.setRxExt());\n                    return true;\n                case Constants.MESSAGE_ENABLE_RX_EXT:\n                    await this.write(Messages.libConfig(channel, 0xe0));\n                    return true;\n                case Constants.MESSAGE_LIB_CONFIG:\n                    await this.write(Messages.openRxScan());\n                    return true;\n                case Constants.MESSAGE_CHANNEL_OPEN_RX_SCAN:\n                    nextTick(() => this.emit(\"attached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_CLOSE:\n                    return true;\n                case Constants.MESSAGE_CHANNEL_UNASSIGN:\n                    this.statusCbk = undefined;\n                    this.channel = undefined;\n                    nextTick(() => this.emit(\"detached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n                    return status.code === Constants.TRANSFER_IN_PROGRESS;\n                default:\n                    break;\n            }\n            return false;\n        };\n\n        if (await this.stick.isScanning()) {\n            this.channel = channel;\n            this.deviceId = 0;\n            this.transmissionType = 0;\n\n            this.statusCbk = onStatus;\n\n            nextTick(() => this.emit(\"attached\"));\n        } else if (await this.stick.attach(this, true)) {\n            this.channel = channel;\n            this.deviceId = 0;\n            this.transmissionType = 0;\n\n            this.statusCbk = onStatus;\n\n            await this.write(Messages.assignChannel(channel, type));\n        } else {\n            const errorMessage = (await this.stick.canAttach()) ? \"Cannot attach: Device is not scanning, and an unknown error occurred during attachment.\" : \"Cannot attach: Maximum number of channels reached, unable to attach more sensors.\";\n            throw new Error(errorMessage);\n        }\n    }\n\n    /**\n     * Attaches the sensor to a specific channel with the given parameters.\n     *\n     * @param {number} channel - The channel number to attach to.\n     * @param {string} type - The type of device.\n     * @param {number} deviceId - The device ID.\n     * @param {number} deviceType - The type of the device.\n     * @param {number} transmissionType - The transmission type.\n     * @param {number} timeout - The timeout value for the channel.\n     * @param {number} period - The period for communication.\n     * @param {number} frequency - The frequency for communication.\n     *\n     * @throws Will throw an error if already attached or if unable to attach.\n     */\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number, frequency: number) {\n        if (this.channel !== undefined) {\n            throw new Error(\"Already attached\");\n        }\n\n        const attached = await this.stick.attach(this, false);\n        if (!attached) {\n            const errorMessage = (await this.stick.canAttach()) ? \"Cannot attach: Device is not in scanning mode or an unknown error occurred.\" : \"Cannot attach: Maximum number of channels reached, unable to attach more sensors.\";\n            throw new Error(errorMessage);\n        }\n\n        this.channel = channel;\n        this.deviceId = deviceId;\n        this.transmissionType = transmissionType;\n\n        const onStatus = async (status: Status) => {\n            switch (status.msg) {\n                case Constants.MESSAGE_RF:\n                    // Handle various message statuses\n                    switch (status.code) {\n                        case Constants.EVENT_CHANNEL_CLOSED:\n                        case Constants.EVENT_RX_FAIL_GO_TO_SEARCH:\n                            await this.write(Messages.unassignChannel(channel));\n                            return true;\n                        case Constants.EVENT_TRANSFER_TX_COMPLETED:\n                        case Constants.EVENT_TRANSFER_TX_FAILED:\n                        case Constants.EVENT_RX_FAIL:\n                        case Constants.INVALID_SCAN_TX_CHANNEL: {\n                            const mc = this.messageQueue.shift();\n                            if (mc && mc.cbk) {\n                                mc.cbk(status.code === Constants.EVENT_TRANSFER_TX_COMPLETED);\n                            }\n                            if (this.messageQueue.length) {\n                                await this.write(this.messageQueue[0].msg);\n                            }\n                            return true;\n                        }\n                        case Constants.EVENT_CHANNEL_COLLISION:\n                            return true;\n                        default:\n                            break;\n                    }\n                    break;\n                case Constants.MESSAGE_CHANNEL_ASSIGN:\n                    await this.write(Messages.setDevice(channel, deviceId, deviceType, transmissionType));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ID:\n                    await this.write(Messages.searchChannel(channel, timeout));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_SEARCH_TIMEOUT:\n                    await this.write(Messages.setFrequency(channel, frequency));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_FREQUENCY:\n                    await this.write(Messages.setPeriod(channel, period));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_PERIOD:\n                    await this.write(Messages.libConfig(channel, 0xe0));\n                    return true;\n                case Constants.MESSAGE_LIB_CONFIG:\n                    await this.write(Messages.openChannel(channel));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_OPEN:\n                    nextTick(() => this.emit(\"attached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_CLOSE:\n                    return true;\n                case Constants.MESSAGE_CHANNEL_UNASSIGN:\n                    this.statusCbk = undefined;\n                    this.channel = undefined;\n                    nextTick(() => this.emit(\"detached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n                    return status.code === Constants.TRANSFER_IN_PROGRESS;\n                default:\n                    break;\n            }\n            return false;\n        };\n\n        this.statusCbk = onStatus;\n\n        await this.write(Messages.assignChannel(channel, type));\n    }\n\n    /**\n     * Detaches the sensor from its assigned channel and stops communication.\n     *\n     * @throws Will throw an error if there is an issue detaching.\n     */\n    public async detach() {\n        if (this.channel === undefined) {\n            return;\n        }\n        await this.write(Messages.closeChannel(this.channel));\n        const detached = await this.stick.detach(this);\n        if (!detached) {\n            throw new Error(\"Error on detaching\");\n        }\n    }\n\n    /**\n     * Sends data to the USB device.\n     *\n     * @param {Uint8Array} data - The data buffer to send.\n     */\n    protected async write(data: Uint8Array): Promise<void> {\n        await this.stick.write(data);\n    }\n\n    /**\n     * Handles incoming event messages from the USB device.\n     *\n     * @private\n     * @param {Uint8Array} data - The data buffer containing the event message.\n     */\n    private async handleEventMessages(data: Uint8Array): Promise<void> {\n        const dataView = new DataView(data.buffer);\n        const messageId = dataView.getUint8(Messages.BUFFER_INDEX_MSG_TYPE);\n        const channel = dataView.getUint8(Messages.BUFFER_INDEX_CHANNEL_NUM);\n\n        if (channel === this.channel) {\n            if (messageId === Constants.MESSAGE_CHANNEL_EVENT) {\n                const status: Status = {\n                    msg: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA),\n                    code: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1),\n                };\n\n                const handled = this.statusCbk && this.statusCbk(status);\n                if (!handled) {\n                    console.log(\n                        \"Unhandled event: \" +\n                            Array.from(data)\n                                .map((byte) => byte.toString(16))\n                                .join(\" \")\n                    );\n                    this.emit(\"eventData\", {\n                        message: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA),\n                        code: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1),\n                    });\n                }\n            } else if (this.decodeDataCbk) {\n                await this.decodeDataCbk(dataView);\n            }\n        }\n    }\n\n    /**\n     * Sends data and optionally a callback to handle the result of the send operation.\n     *\n     * @param {Uint8Array} data - The data buffer to send.\n     * @param {SendCallback} [cbk] - Optional callback to handle the send result.\n     */\n    protected async send(data: Uint8Array, cbk?: SendCallback): Promise<void> {\n        this.messageQueue.push({ msg: data, cbk });\n        if (this.messageQueue.length === 1) {\n            await this.write(data);\n        }\n    }\n}\n","import { HeartRateScanner } from \"./heartRateScanner.js\";\nimport { HeartRateScanState } from \"./heartRateScanState.js\";\nimport { HeartRateSensor } from \"./heartRateSensor.js\";\nimport { HeartRateSensorState } from \"./heartRateSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\nexport enum PageState {\n    INIT_PAGE,\n    STD_PAGE,\n    EXT_PAGE,\n}\n\nexport type Page = {\n    oldPage: number;\n    pageState: PageState; // sets the state of the receiver - INIT, STD_PAGE, EXT_PAGE\n};\n\nconst TOGGLE_MASK = 0x80;\n\n/**\n * Updates the state of a Heart Rate sensor or scanner based on incoming data.\n * Decodes various pages of data to update the state, including operating time, manufacturer details,\n * battery status, heart rate data, and more.\n *\n * @param {HeartRateSensor | HeartRateScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {HeartRateSensorState | HeartRateScanState} state - The current state of the sensor or scanner.\n * @param {Page} page - The page information containing the current and old page number.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new HeartRateSensor();\n * const state = new HeartRateSensorState(12345);\n * const page = { oldPage: 0, pageState: PageState.INIT_PAGE };\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, page, dataBuffer);\n */\nexport function updateState(sensor: HeartRateSensor | HeartRateScanner, state: HeartRateSensorState | HeartRateScanState, page: Page, data: DataView): void {\n    const pageNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n    if (page.pageState === PageState.INIT_PAGE) {\n        page.pageState = PageState.STD_PAGE; // change the state to STD_PAGE and allow the checking of old and new pages\n    } else if (pageNum !== page.oldPage || page.pageState === PageState.EXT_PAGE) {\n        page.pageState = PageState.EXT_PAGE; // set the state to use the extended page format\n        switch (\n            pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\n        ) {\n            case 1:\n                // Decode the cumulative operating time\n                state.OperatingTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\n                state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\n                state.OperatingTime *= 2;\n                break;\n            case 2:\n                // Decode the Manufacturer ID\n                state.ManId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                // Decode the 4-byte serial number\n                state.SerialNumber = state.DeviceId;\n                state.SerialNumber |= data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true) << 16;\n                state.SerialNumber >>>= 0;\n                break;\n            case 3:\n                // Decode hardware version, software version, and model number\n                state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                state.SwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                state.ModelNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            case 4:\n                // Decode the previous heart beat measurement time\n                state.PreviousBeat = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true);\n                break;\n            case 5:\n                state.IntervalAverage = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                state.IntervalMax = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                state.SessionAverage = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            case 6:\n                state.SupportedFeatures = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                state.EnabledFeatures = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            case 7: {\n                const batteryLevel = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                const batteryFrac = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                const batteryStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                if (batteryLevel !== 0xff) {\n                    state.BatteryLevel = batteryLevel;\n                }\n                state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n                const batteryFlags = (batteryStatus & 0x70) >>> 4;\n                state.BatteryStatusBit = batteryFlags;\n                switch (batteryFlags) {\n                    case 1:\n                        state.BatteryStatus = \"New\";\n                        break;\n                    case 2:\n                        state.BatteryStatus = \"Good\";\n                        break;\n                    case 3:\n                        state.BatteryStatus = \"Ok\";\n                        break;\n                    case 4:\n                        state.BatteryStatus = \"Low\";\n                        break;\n                    case 5:\n                        state.BatteryStatus = \"Critical\";\n                        break;\n                    default:\n                        state.BatteryVoltage = undefined;\n                        state.BatteryStatus = \"Invalid\";\n                        break;\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    // Decode the last four bytes of the HRM format, the first byte of this message is the channel number\n    DecodeDefaultHRM(state, new DataView(data.buffer.slice(Messages.BUFFER_INDEX_MSG_DATA + 4)));\n    page.oldPage = pageNum;\n\n    sensor.emit(\"heartRateData\", state);\n}\n\n/**\n * Decodes the default Heart Rate Monitor (HRM) data from the buffer and updates the sensor state.\n *\n * @param {HeartRateSensorState | HeartRateScanState} state - The current state of the sensor or scanner.\n * @param {DataView} pucPayload - The buffer containing the HRM data.\n * @returns {void}\n *\n * @example\n * const state = new HeartRateSensorState(12345);\n * const hrmData = new Uint8Array([0x00, 0x01, 0x02, 0x03]); // Sample HRM data buffer\n * DecodeDefaultHRM(state, hrmData);\n */\nfunction DecodeDefaultHRM(state: HeartRateSensorState | HeartRateScanState, pucPayload: DataView): void {\n    // Decode the measurement time data (two bytes)\n    state.BeatTime = pucPayload.getUint16(0, true); // little-endian\n    // Decode the measurement count data\n    state.BeatCount = pucPayload.getUint8(2);\n    // Decode the computed heart rate data\n    state.ComputedHeartRate = pucPayload.getUint8(3);\n}\n","/**\n * Represents the state of a Heart Rate sensor.\n * This class holds the data fields associated with the state of a Heart Rate sensor,\n * including heart rate measurements, device details, and battery status.\n */\nexport class HeartRateSensorState {\n    /**\n     * Creates an instance of the HeartRateSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new HeartRateSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last beat event in milliseconds.\n     * @type {number | undefined}\n     */\n    BeatTime: number | undefined;\n\n    /**\n     * The cumulative count of beat events since the sensor started.\n     * @type {number | undefined}\n     */\n    BeatCount: number | undefined;\n\n    /**\n     * The computed heart rate in beats per minute (BPM).\n     * @type {number | undefined}\n     */\n    ComputedHeartRate: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The time of the previous beat measurement.\n     * @type {number | undefined}\n     */\n    PreviousBeat?: number;\n\n    /**\n     * The average heart rate over a certain interval.\n     * @type {number | undefined}\n     */\n    IntervalAverage?: number;\n\n    /**\n     * The maximum heart rate over a certain interval.\n     * @type {number | undefined}\n     */\n    IntervalMax?: number;\n\n    /**\n     * The average heart rate over the current session.\n     * @type {number | undefined}\n     */\n    SessionAverage?: number;\n\n    /**\n     * The supported features of the sensor.\n     * @type {number | undefined}\n     */\n    SupportedFeatures?: number;\n\n    /**\n     * The enabled features of the sensor.\n     * @type {number | undefined}\n     */\n    EnabledFeatures?: number;\n\n    /**\n     * The battery level of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryLevel?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n}\n","import { HeartRateSensorState } from \"./heartRateSensorState.js\";\n\n/**\n * Represents the state of a Heart Rate sensor during scanning.\n * Extends the HeartRateSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class HeartRateScanState extends HeartRateSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","import { BaseSensor } from \"./baseSensor.js\";\n\n/**\n * Abstract base class for ANT+ sensors, extending the functionality of the BaseSensor class.\n * This class provides methods to scan and attach ANT+ sensors with specific configurations.\n */\nexport abstract class AntPlusBaseSensor extends BaseSensor {\n    /**\n     * Initiates a scan for ANT+ sensors of a specific type.\n     *\n     * @protected\n     * @param {string} type - The type of sensor to scan for.\n     * @returns {Promise<void>} A promise that resolves when the scan is complete.\n     *\n     * @example\n     * // Example usage:\n     * const sensor = new AntPlusSensor();\n     * sensor.scan('heartRate');\n     */\n    protected async scan(type: string): Promise<void> {\n        return await super.scan(type, 57);\n    }\n\n    /**\n     * Attaches to a specific ANT+ sensor by configuring the channel, type, device ID, device type, transmission type, timeout, and period.\n     *\n     * @protected\n     * @param {number} channel - The channel number to use for communication with the sensor.\n     * @param {string} type - The type of sensor to attach to.\n     * @param {number} deviceId - The unique ID of the device to attach to.\n     * @param {number} deviceType - The type of the device (e.g., heart rate monitor, speed sensor).\n     * @param {number} transmissionType - The transmission type used by the sensor.\n     * @param {number} timeout - The timeout period for communication in seconds.\n     * @param {number} period - The communication period with the sensor in milliseconds.\n     * @returns {Promise<void>} A promise that resolves when the sensor is successfully attached.\n     *\n     * @example\n     * // Example usage:\n     * const sensor = new AntPlusSensor();\n     * sensor.attachSensor(1, 'heartRate', 12345, 120, 5, 60, 8070);\n     */\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number): Promise<void> {\n        return await super.attachSensor(channel, type, deviceId, deviceType, transmissionType, timeout, period, 57);\n    }\n}\n","import { AntPlusBaseSensor } from \"./antPlusBaseSensor.js\";\nimport { Constants } from \"../types/constants.js\";\nimport { Messages } from \"../utils/messages.js\";\nimport { USBDriverBase } from \"../types/usbDriverBase.js\";\n\n/**\n * Abstract base class for managing a specific ANT+ sensor, extending the functionality\n * of the AntPlusBaseSensor class. Provides methods for attaching sensors and decoding data.\n */\nexport abstract class AntPlusSensor extends AntPlusBaseSensor {\n    /**\n     * Constructs an instance of the AntPlusSensor class.\n     *\n     * @param {USBDriverBase} stick - The USB driver instance used for communication with the ANT+ stick.\n     */\n    constructor(stick: USBDriverBase) {\n        super(stick);\n        this.decodeDataCbk = this.decodeData.bind(this);\n    }\n\n    /**\n     * Unsupported method for scanning sensors. Throws an error when called.\n     *\n     * @protected\n     * @throws {Error} Always throws an error indicating that scanning is unsupported.\n     */\n    protected scan(): Promise<void> {\n        throw new Error(\"scanning unsupported\");\n    }\n\n    /**\n     * Attaches to a specific ANT+ sensor by configuring the channel, type, device ID, device type,\n     * transmission type, timeout, and period.\n     *\n     * @protected\n     * @param {number} channel - The channel number to use for communication with the sensor.\n     * @param {string} type - The type of sensor to attach to.\n     * @param {number} deviceId - The unique ID of the device to attach to.\n     * @param {number} deviceType - The type of the device (e.g., heart rate monitor, speed sensor).\n     * @param {number} transmissionType - The transmission type used by the sensor.\n     * @param {number} timeout - The timeout period for communication in seconds.\n     * @param {number} period - The communication period with the sensor in milliseconds.\n     * @returns {Promise<void>} A promise that resolves when the sensor is successfully attached.\n     *\n     * @example\n     * // Example usage:\n     * const sensor = new AntPlusSensor();\n     * sensor.attachSensor(1, 'heartRate', 12345, 120, 5, 60, 8070);\n     */\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number): Promise<void> {\n        return await super.attachSensor(channel, type, deviceId, deviceType, transmissionType, timeout, period);\n    }\n\n    /**\n     * Decodes the incoming data from the ANT+ sensor and updates the sensor state.\n     *\n     * @private\n     * @param {DataView} data - The raw data buffer received from the ANT+ sensor.\n     * @returns {void}\n     *\n     * @example\n     * // Example usage:\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * decodeData(dataBuffer);\n     */\n    private async decodeData(data: DataView): Promise<void> {\n        switch (data.getUint8(Messages.BUFFER_INDEX_MSG_TYPE)) {\n            case Constants.MESSAGE_CHANNEL_BROADCAST_DATA:\n            case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n            case Constants.MESSAGE_CHANNEL_BURST_DATA:\n                if (this.deviceId === 0 && this.channel != undefined) {\n                    await this.write(Messages.requestMessage(this.channel, Constants.MESSAGE_CHANNEL_ID));\n                }\n                this.updateState(this.deviceId, data);\n                break;\n            case Constants.MESSAGE_CHANNEL_ID:\n                this.deviceId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA, true);\n                this.transmissionType = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            default:\n                break;\n        }\n    }\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#526_tab\n * Spec sheet: https://www.thisisant.com/resources/heart-rate-monitor/\n */\n\nimport { Page, PageState, updateState } from \"./heartRateUtils.js\";\nimport { HeartRateSensorState } from \"./heartRateSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents a Heart Rate sensor.\n * This class extends the AntPlusSensor class to handle specific data related to heart rate monitoring.\n *\n * @category Sensors\n */\nexport class HeartRateSensor extends AntPlusSensor {\n    /**\n     * The device type code for Heart Rate sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 120;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new HeartRateSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, HeartRateSensor.deviceType, 0, 255, 8070);\n        this.state = new HeartRateSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Heart Rate sensor.\n     * @private\n     * @type {HeartRateSensorState}\n     */\n    private state!: HeartRateSensorState;\n\n    /**\n     * Represents the page information used in communication with the sensor.\n     * @private\n     * @type {Page}\n     * @default { oldPage: -1, pageState: PageState.INIT_PAGE }\n     */\n    private page: Page = {\n        oldPage: -1,\n        pageState: PageState.INIT_PAGE,\n    };\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, this.page, data);\n    }\n}\n","import { AntPlusBaseSensor } from \"./antPlusBaseSensor.js\";\nimport { Constants } from \"../types/constants.js\";\nimport { Messages } from \"../utils/messages.js\";\nimport { USBDriverBase } from \"../types/usbDriverBase.js\";\n\n/**\n * Abstract base class for scanning and decoding data from ANT+ sensors.\n * This class provides methods to scan for sensors, handle sensor data, and manage sensor states.\n */\nexport abstract class AntPlusScanner extends AntPlusBaseSensor {\n    /**\n     * Returns the type of device being scanned for.\n     *\n     * @protected\n     * @returns {number} The numeric code representing the device type.\n     */\n    protected abstract deviceType(): number;\n\n    /**\n     * Creates a new state for the device if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the device.\n     */\n    protected abstract createStateIfNew(deviceId: number): void;\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and the signal threshold for the specified device.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     */\n    protected abstract updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void;\n\n    /**\n     * Constructs an instance of the AntPlusScanner class.\n     *\n     * @param {USBDriverBase} stick - The USB driver instance used for communication with the ANT+ stick.\n     */\n    constructor(stick: USBDriverBase) {\n        super(stick);\n        this.decodeDataCbk = this.decodeData.bind(this);\n    }\n\n    /**\n     * Initiates a scan for ANT+ sensors by receiving broadcast messages.\n     *\n     * @public\n     * @returns {Promise<void>} A promise that resolves when the scanning process is complete.\n     *\n     * @example\n     * // Example usage:\n     * const scanner = new AntPlusScanner();\n     * scanner.scan();\n     */\n    public async scan(): Promise<void> {\n        return await super.scan(\"receive\");\n    }\n\n    /**\n     * Unsupported method for attaching to a sensor. Throws an error when called.\n     *\n     * @protected\n     * @throws {Error} Always throws an error indicating that attaching is unsupported.\n     */\n    protected attach() {\n        throw new Error(\"attach unsupported\");\n    }\n\n    /**\n     * Unsupported method for sending data to a sensor. Throws an error when called.\n     *\n     * @protected\n     * @throws {Error} Always throws an error indicating that sending is unsupported.\n     */\n    protected send(): Promise<void> {\n        throw new Error(\"send unsupported\");\n    }\n\n    /**\n     * Decodes the incoming data from the ANT+ sensors and updates the sensor state.\n     *\n     * @private\n     * @param {DataView} data - The raw data buffer received from the ANT+ sensor.\n     * @returns {void}\n     *\n     * @example\n     * // Example usage:\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * decodeData(dataBuffer);\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    private async decodeData(data: DataView): Promise<void> {\n        if (data.byteLength <= Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3 || !(data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x80)) {\n            const bytesArray = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n            console.log(\n                \"wrong message format\",\n                Array.from(bytesArray)\n                    .map((byte) => byte.toString(16))\n                    .join(\" \")\n            );\n            return;\n        }\n\n        const deviceId = data.getUint16(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 1, true);\n        console.log(this.deviceId);\n        const deviceType = data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3);\n\n        if (deviceType !== this.deviceType()) {\n            return;\n        }\n\n        this.createStateIfNew(deviceId);\n\n        // Check if the RSSI and threshold should be updated\n        if (data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x40) {\n            if (data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 5) === 0x20) {\n                const rssi = data.getInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 6);\n                const threshold = data.getInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 7);\n                this.updateRssiAndThreshold(deviceId, rssi, threshold);\n            }\n        }\n\n        // Handle different message types\n        switch (data.getUint8(Messages.BUFFER_INDEX_MSG_TYPE)) {\n            case Constants.MESSAGE_CHANNEL_BROADCAST_DATA:\n            case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n            case Constants.MESSAGE_CHANNEL_BURST_DATA:\n                this.updateState(deviceId, data);\n                break;\n            default:\n                break;\n        }\n    }\n}\n","import { StrideSpeedDistanceScanner } from \"./strideSpeedDistanceScanner.js\";\nimport { StrideSpeedDistanceScanState } from \"./strideSpeedDistanceScanState.js\";\nimport { StrideSpeedDistanceSensor } from \"./strideSpeedDistanceSensor.js\";\nimport { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of a Stride-Based Speed and Distance Monitor (SDM) sensor or scanner\n * based on the data received from the sensor.\n *\n * @param {StrideSpeedDistanceSensor | StrideSpeedDistanceScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {StrideSpeedDistanceSensorState | StrideSpeedDistanceScanState} state - The current state of the sensor or scanner.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new StrideSpeedDistanceSensor();\n * const state = new StrideSpeedDistanceSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: StrideSpeedDistanceSensor | StrideSpeedDistanceScanner, state: StrideSpeedDistanceSensorState | StrideSpeedDistanceScanState, data: DataView) {\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n\n    if (page === 1) {\n        state.TimeFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n        state.TimeInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n        state.DistanceInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n        state.DistanceFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;\n        state.SpeedInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0f;\n        state.SpeedFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 5);\n        state.StrideCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n        state.UpdateLatency = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n    } else if (page >= 2 && page <= 15) {\n        state.CadenceInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n        state.CadenceFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;\n        state.SpeedInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0f;\n        state.SpeedFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 5);\n        state.Status = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n        switch (page) {\n            case 3:\n                state.Calories = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n                break;\n            default:\n                break;\n        }\n    }\n\n    sensor.emit(\"ssddata\", state);\n    sensor.emit(\"ssdData\", state);\n}\n","/**\n * Represents the state of a Stride-Based Speed and Distance Monitor (SDM) sensor.\n * This class holds the data fields associated with the SDM sensor's state, including device ID,\n * speed, distance, cadence, and other relevant metrics.\n */\nexport class StrideSpeedDistanceSensorState {\n    /**\n     * Creates an instance of the StrideSpeedDistanceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new StrideSpeedDistanceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The fractional part of the elapsed time in seconds.\n     * @type {number | undefined}\n     */\n    TimeFractional: number | undefined;\n\n    /**\n     * The integer part of the elapsed time in seconds.\n     * @type {number | undefined}\n     */\n    TimeInteger: number | undefined;\n\n    /**\n     * The integer part of the total distance traveled in meters.\n     * @type {number | undefined}\n     */\n    DistanceInteger: number | undefined;\n\n    /**\n     * The fractional part of the total distance traveled in meters.\n     * @type {number | undefined}\n     */\n    DistanceFractional: number | undefined;\n\n    /**\n     * The integer part of the speed in meters per second.\n     * @type {number | undefined}\n     */\n    SpeedInteger: number | undefined;\n\n    /**\n     * The fractional part of the speed in meters per second.\n     * @type {number | undefined}\n     */\n    SpeedFractional: number | undefined;\n\n    /**\n     * The total number of strides counted.\n     * @type {number | undefined}\n     */\n    StrideCount: number | undefined;\n\n    /**\n     * The latency in milliseconds between updates.\n     * @type {number | undefined}\n     */\n    UpdateLatency: number | undefined;\n\n    /**\n     * The integer part of the cadence in strides per minute.\n     * @type {number | undefined}\n     */\n    CadenceInteger: number | undefined;\n\n    /**\n     * The fractional part of the cadence in strides per minute.\n     * @type {number | undefined}\n     */\n    CadenceFractional: number | undefined;\n\n    /**\n     * The status of the sensor, represented by a numeric value.\n     * @type {number | undefined}\n     */\n    Status: number | undefined;\n\n    /**\n     * The total calories burned, if available.\n     * @type {number | undefined}\n     */\n    Calories: number | undefined;\n}\n","import { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\n\n/**\n * Represents the state of a Stride-Based Speed and Distance Monitor (SDM) sensor during scanning.\n * Extends the StrideSpeedDistanceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and the signal threshold.\n */\nexport class StrideSpeedDistanceScanState extends StrideSpeedDistanceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#528_tab\n * Spec sheet: https://www.thisisant.com/resources/stride-based-speed-and-distance-monitor/\n */\n\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { updateState } from \"./strideSpeedDistanceUtils.js\";\nimport { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\n\n/**\n * Represents a Stride-Based Speed and Distance Monitor (SDM) sensor.\n * This class extends the AntPlusSensor class to provide specific functionality for handling SDM sensor data.\n *\n * @category Sensors\n */\nexport class StrideSpeedDistanceSensor extends AntPlusSensor {\n    /**\n     * The device type code for Stride-Based Speed and Distance Monitor (SDM) sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 124;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new StrideSpeedDistanceSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, StrideSpeedDistanceSensor.deviceType, 0, 255, 8134);\n        this.state = new StrideSpeedDistanceSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Stride-Based Speed and Distance Monitor sensor.\n     * @private\n     * @type {StrideSpeedDistanceSensorState}\n     */\n    private state!: StrideSpeedDistanceSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { SpeedCadenceScanner } from \"./speedCadenceScanner.js\";\nimport { SpeedCadenceScanState } from \"./speedCadenceScanState.js\";\nimport { SpeedCadenceSensor } from \"./speedCadenceSensor.js\";\nimport { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of a Speed and Cadence sensor or scanner based on the incoming data.\n * Calculates the cadence and speed based on the revolution counts and event times provided in the data buffer.\n *\n * @param {SpeedCadenceSensor | SpeedCadenceScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {SpeedCadenceSensorState | SpeedCadenceScanState} state - The current state of the sensor or scanner.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new SpeedCadenceSensor();\n * const state = new SpeedCadenceSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: SpeedCadenceSensor | SpeedCadenceScanner, state: SpeedCadenceSensorState | SpeedCadenceScanState, data: DataView) {\n    // Get old state for calculating cumulative values\n    const oldCadenceTime = state.CadenceEventTime ?? 0;\n    const oldCadenceCount = state.CumulativeCadenceRevolutionCount ?? 0;\n    const oldSpeedTime = state.SpeedEventTime ?? 0;\n    const oldSpeedCount = state.CumulativeSpeedRevolutionCount ?? 0;\n\n    let cadenceTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA, true);\n    let cadenceCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true);\n    let speedEventTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n    let speedRevolutionCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n\n    if (cadenceTime !== oldCadenceTime) {\n        state.CadenceEventTime = cadenceTime;\n        state.CumulativeCadenceRevolutionCount = cadenceCount;\n\n        if (oldCadenceTime > cadenceTime) {\n            // Hit rollover value\n            cadenceTime += 1024 * 64;\n        }\n\n        if (oldCadenceCount > cadenceCount) {\n            // Hit rollover value\n            cadenceCount += 1024 * 64;\n        }\n\n        const cadence = (60 * (cadenceCount - oldCadenceCount) * 1024) / (cadenceTime - oldCadenceTime);\n        if (!isNaN(cadence)) {\n            state.CalculatedCadence = cadence;\n            sensor.emit(\"cadenceData\", state);\n        }\n    }\n\n    if (speedEventTime !== oldSpeedTime) {\n        state.SpeedEventTime = speedEventTime;\n        state.CumulativeSpeedRevolutionCount = speedRevolutionCount;\n\n        if (oldSpeedTime > speedEventTime) {\n            // Hit rollover value\n            speedEventTime += 1024 * 64;\n        }\n\n        if (oldSpeedCount > speedRevolutionCount) {\n            // Hit rollover value\n            speedRevolutionCount += 1024 * 64;\n        }\n\n        const distance = sensor.wheelCircumference * (speedRevolutionCount - oldSpeedCount);\n        state.CalculatedDistance = distance;\n\n        // Calculate speed in m/sec\n        const speed = (distance * 1024) / (speedEventTime - oldSpeedTime);\n        if (!isNaN(speed)) {\n            state.CalculatedSpeed = speed;\n            sensor.emit(\"speedData\", state);\n        }\n    }\n}\n","/**\n * Represents the state of a Speed and Cadence sensor.\n * This class holds the data fields associated with the state of a Speed and Cadence sensor, including\n * cadence, speed, distance, and event times.\n */\nexport class SpeedCadenceSensorState {\n    /**\n     * Creates an instance of the SpeedCadenceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new SpeedCadenceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last cadence event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    CadenceEventTime: number | undefined;\n\n    /**\n     * The cumulative count of cadence revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeCadenceRevolutionCount: number | undefined;\n\n    /**\n     * The time of the last speed event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    SpeedEventTime: number | undefined;\n\n    /**\n     * The cumulative count of speed revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeSpeedRevolutionCount: number | undefined;\n\n    /**\n     * The calculated cadence in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    CalculatedCadence: number | undefined;\n\n    /**\n     * The calculated distance traveled in meters.\n     * @type {number | undefined}\n     */\n    CalculatedDistance: number | undefined;\n\n    /**\n     * The calculated speed in meters per second (m/s).\n     * @type {number | undefined}\n     */\n    CalculatedSpeed: number | undefined;\n}\n","import { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\n\n/**\n * Represents the state of a Speed and Cadence sensor during scanning.\n * Extends the SpeedCadenceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class SpeedCadenceScanState extends SpeedCadenceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\n */\n\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { updateState } from \"./speedCadenceUtils.js\";\nimport { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\n\n/**\n * Represents a Bicycle Speed and Cadence sensor.\n * This class extends the AntPlusSensor class to handle specific data related to speed and cadence.\n *\n * @category Sensors\n */\nexport class SpeedCadenceSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Speed and Cadence sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x79;\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedCadenceSensor();\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number) {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedCadenceSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, SpeedCadenceSensor.deviceType, 0, 255, 8086);\n        this.state = new SpeedCadenceSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Bicycle Speed and Cadence sensor.\n     * @private\n     * @type {SpeedCadenceSensorState}\n     */\n    private state!: SpeedCadenceSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { SpeedScanner } from \"./speedScanner.js\";\nimport { SpeedScanState } from \"./speedScanState.js\";\nimport { SpeedSensor } from \"./speedSensor.js\";\nimport { SpeedSensorState } from \"./speedSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\nconst TOGGLE_MASK = 0x80;\n\n/**\n * Updates the state of a Speed sensor or scanner based on the incoming data.\n * Decodes various pages of data to update the state, including cumulative operating time,\n * manufacturer details, hardware and software versions, battery status, motion status, and speed.\n *\n * @param {SpeedSensor | SpeedScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {SpeedSensorState | SpeedScanState} state - The current state of the sensor or scanner.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n * @example\n * const sensor = new SpeedSensor();\n * const state = new SpeedSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: SpeedSensor | SpeedScanner, state: SpeedSensorState | SpeedScanState, data: DataView) {\n    const pageNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n    switch (\n        pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\n    ) {\n        case 1:\n            // Decode the cumulative operating time\n            state.OperatingTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\n            state.OperatingTime *= 2;\n            break;\n        case 2:\n            // Decode the Manufacturer ID\n            state.ManId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            // Decode the 4-byte serial number\n            state.SerialNumber = state.DeviceId;\n            state.SerialNumber |= data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true) << 16;\n            state.SerialNumber >>>= 0;\n            break;\n        case 3:\n            // Decode hardware version, software version, and model number\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.SwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            state.ModelNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            break;\n        case 4: {\n            // Decode battery status\n            const batteryFrac = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const batteryStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\n            state.BatteryStatusBit = batteryFlags;\n            switch (batteryFlags) {\n                case 1:\n                    state.BatteryStatus = \"New\";\n                    break;\n                case 2:\n                    state.BatteryStatus = \"Good\";\n                    break;\n                case 3:\n                    state.BatteryStatus = \"Ok\";\n                    break;\n                case 4:\n                    state.BatteryStatus = \"Low\";\n                    break;\n                case 5:\n                    state.BatteryStatus = \"Critical\";\n                    break;\n                default:\n                    state.BatteryVoltage = undefined;\n                    state.BatteryStatus = \"Invalid\";\n                    break;\n            }\n            break;\n        }\n        case 5:\n            // Decode motion status\n            state.Motion = (data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1) & 0x01) === 0x01;\n            break;\n        default:\n            break;\n    }\n\n    // Get old state for calculating cumulative values\n    const oldSpeedTime = state.SpeedEventTime ?? 0;\n    const oldSpeedCount = state.CumulativeSpeedRevolutionCount ?? 0;\n\n    let speedEventTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n    let speedRevolutionCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n\n    if (speedEventTime !== oldSpeedTime) {\n        state.SpeedEventTime = speedEventTime;\n        state.CumulativeSpeedRevolutionCount = speedRevolutionCount;\n\n        if (oldSpeedTime > speedEventTime) {\n            // Hit rollover value\n            speedEventTime += 1024 * 64;\n        }\n\n        if (oldSpeedCount > speedRevolutionCount) {\n            // Hit rollover value\n            speedRevolutionCount += 1024 * 64;\n        }\n\n        const distance = sensor.wheelCircumference * (speedRevolutionCount - oldSpeedCount);\n        state.CalculatedDistance = distance;\n\n        // Calculate speed in m/sec\n        const speed = (distance * 1024) / (speedEventTime - oldSpeedTime);\n        if (!isNaN(speed)) {\n            state.CalculatedSpeed = speed;\n            sensor.emit(\"speedData\", state);\n        }\n    }\n}\n","/**\n * Represents the state of a Speed sensor.\n * This class holds the data fields associated with the state of a Speed sensor, including\n * speed, distance, event times, and various sensor-specific details.\n */\nexport class SpeedSensorState {\n    /**\n     * Creates an instance of the SpeedSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new SpeedSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last speed event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    SpeedEventTime: number | undefined;\n\n    /**\n     * The cumulative count of speed revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeSpeedRevolutionCount: number | undefined;\n\n    /**\n     * The calculated distance traveled in meters.\n     * @type {number | undefined}\n     */\n    CalculatedDistance: number | undefined;\n\n    /**\n     * The calculated speed in meters per second (m/s).\n     * @type {number | undefined}\n     */\n    CalculatedSpeed: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n\n    /**\n     * Indicates whether the sensor detects motion.\n     * @type {boolean | undefined}\n     */\n    Motion?: boolean;\n}\n","import { SpeedSensorState } from \"./speedSensorState.js\";\n\n/**\n * Represents the state of a Speed sensor during scanning.\n * Extends the SpeedSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class SpeedScanState extends SpeedSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\n */\n\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { updateState } from \"./speedUtils.js\";\nimport { SpeedSensorState } from \"./speedSensorState.js\";\n\n/**\n * Represents a Bicycle Speed sensor.\n * This class extends the AntPlusSensor class to handle specific data related to speed measurement.\n *\n * @category Sensors\n */\nexport class SpeedSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Speed sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x7b;\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedSensor();\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number) {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, SpeedSensor.deviceType, 0, 255, 8118);\n        this.state = new SpeedSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Bicycle Speed sensor.\n     * @private\n     * @type {SpeedSensorState}\n     */\n    private state!: SpeedSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { CadenceScanner } from \"./cadenceScanner.js\";\nimport { CadenceScanState } from \"./cadenceScanState.js\";\nimport { CadenceSensor } from \"./cadenceSensor.js\";\nimport { CadenceSensorState } from \"./cadenceSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\nconst TOGGLE_MASK = 0x80;\n\n/**\n * Updates the state of a Cadence sensor or scanner based on incoming data.\n * Decodes the data buffer and updates the sensor state accordingly, including\n * cumulative values such as operating time, manufacturer details, battery status,\n * and calculated cadence.\n *\n * @param {CadenceSensor | CadenceScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {CadenceSensorState | CadenceScanState} state - The current state of the sensor or scanner.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n */\nexport function updateState(sensor: CadenceSensor | CadenceScanner, state: CadenceSensorState | CadenceScanState, data: DataView): void {\n    const pageNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n\n    switch (\n        pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\n    ) {\n        case 1:\n            // Decode the cumulative operating time\n            state.OperatingTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\n            state.OperatingTime *= 2;\n            break;\n        case 2:\n            // Decode the Manufacturer ID\n            state.ManId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            // Decode the 4-byte serial number\n            state.SerialNumber = state.DeviceId;\n            state.SerialNumber |= data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true) << 16;\n            state.SerialNumber >>>= 0;\n            break;\n        case 3:\n            // Decode HW version, SW version, and model number\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.SwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            state.ModelNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            break;\n        case 4: {\n            const batteryFrac = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const batteryStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\n            state.BatteryStatusBit = batteryFlags;\n            switch (batteryFlags) {\n                case 1:\n                    state.BatteryStatus = \"New\";\n                    break;\n                case 2:\n                    state.BatteryStatus = \"Good\";\n                    break;\n                case 3:\n                    state.BatteryStatus = \"Ok\";\n                    break;\n                case 4:\n                    state.BatteryStatus = \"Low\";\n                    break;\n                case 5:\n                    state.BatteryStatus = \"Critical\";\n                    break;\n                default:\n                    state.BatteryVoltage = undefined;\n                    state.BatteryStatus = \"Invalid\";\n                    break;\n            }\n            break;\n        }\n        case 5:\n            state.Motion = (data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1) & 0x01) === 0x01;\n            break;\n        default:\n            break;\n    }\n\n    // Get old state for calculating cumulative values\n    const oldCadenceTime = state.CadenceEventTime ?? 0;\n    const oldCadenceCount = state.CumulativeCadenceRevolutionCount ?? 0;\n\n    let cadenceTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n    let cadenceCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n\n    if (cadenceTime !== oldCadenceTime) {\n        state.CadenceEventTime = cadenceTime;\n        state.CumulativeCadenceRevolutionCount = cadenceCount;\n\n        if (oldCadenceTime > cadenceTime) {\n            // Handle rollover\n            cadenceTime += 1024 * 64;\n        }\n\n        if (oldCadenceCount > cadenceCount) {\n            // Handle rollover\n            cadenceCount += 1024 * 64;\n        }\n\n        const cadence = (60 * (cadenceCount - oldCadenceCount) * 1024) / (cadenceTime - oldCadenceTime);\n        if (!isNaN(cadence)) {\n            state.CalculatedCadence = cadence;\n            sensor.emit(\"cadenceData\", state);\n        }\n    }\n}\n","/**\n * Represents the state of a Cadence Sensor.\n * This class holds the data fields associated with the state of a cadence sensor,\n * including event times, revolution counts, and device information.\n */\nexport class CadenceSensorState {\n    /**\n     * Creates an instance of the CadenceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     *\n     * @example\n     * const sensorState = new CadenceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last cadence event, in seconds.\n     * @type {number | undefined}\n     */\n    CadenceEventTime: number | undefined;\n\n    /**\n     * The cumulative number of cadence revolutions counted by the sensor.\n     * @type {number | undefined}\n     */\n    CumulativeCadenceRevolutionCount: number | undefined;\n\n    /**\n     * The calculated cadence in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    CalculatedCadence: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be one of the following: \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n\n    /**\n     * Indicates whether the sensor is in motion.\n     * @type {boolean | undefined}\n     */\n    Motion?: boolean;\n}\n","import { CadenceSensorState } from \"./cadenceSensorState.js\";\n\n/**\n * Represents the state of a Cadence Sensor during scanning.\n * Extends the CadenceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class CadenceScanState extends CadenceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the cadence sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\n */\n\nimport { updateState } from \"./cadenceUtils.js\";\nimport { CadenceSensorState } from \"./cadenceSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents a Bicycle Cadence sensor.\n * This class extends the AntPlusSensor class to handle specific data related to cadence measurement.\n *\n * @category Sensors\n */\nexport class CadenceSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Cadence sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x7a;\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * The current state of the Bicycle Cadence sensor.\n     * @private\n     * @type {CadenceSensorState}\n     */\n    private state!: CadenceSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new CadenceSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, CadenceSensor.deviceType, 0, 255, 8102);\n        this.state = new CadenceSensorState(deviceId);\n    }\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new CadenceSensor();\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { BicyclePowerScanner } from \"./bicyclePowerScanner.js\";\nimport { BicyclePowerScanState } from \"./bicyclePowerScanState.js\";\nimport { BicyclePowerSensor } from \"./bicyclePowerSensor.js\";\nimport { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of a Bicycle Power sensor or scanner based on incoming data.\n * Processes various types of data pages to update the sensor state, including calibration data,\n * pedal power, cadence, and torque calculations.\n *\n * @param {BicyclePowerSensor | BicyclePowerScanner} sensor - The sensor or scanner to update.\n * @param {BicyclePowerSensorState | BicyclePowerScanState} state - The state object representing the current state of the sensor.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n */\nexport function updateState(sensor: BicyclePowerSensor | BicyclePowerScanner, state: BicyclePowerSensorState | BicyclePowerScanState, data: DataView): void {\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n\n    switch (page) {\n        case 0x01: {\n            const calId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            if (calId === 0x10) {\n                const calParam = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                if (calParam === 0x01) {\n                    state.offset = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true); // true for little-endian\n                }\n            }\n            break;\n        }\n        case 0x10: {\n            const pedalPower = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            if (pedalPower !== 0xff) {\n                if (pedalPower & 0x80) {\n                    state.PedalPower = pedalPower & 0x7f;\n                    state.RightPedalPower = state.PedalPower;\n                    state.LeftPedalPower = 100 - state.RightPedalPower;\n                } else {\n                    state.PedalPower = pedalPower & 0x7f;\n                    state.RightPedalPower = undefined;\n                    state.LeftPedalPower = undefined;\n                }\n            } else {\n                state.PedalPower = undefined;\n                state.RightPedalPower = undefined;\n                state.LeftPedalPower = undefined;\n            }\n\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.Cadence = cadence !== 0xff ? cadence : undefined;\n\n            state.AccumulatedPower = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            state.Power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n            break;\n        }\n        case 0x20: {\n            const oldEventCount = state.EventCount ?? 0;\n            const oldTimeStamp = state.TimeStamp ?? 0;\n            const oldTorqueTicksStamp = state.TorqueTicksStamp ?? 0;\n\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const slope = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\n            let timeStamp = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\n            let torqueTicksStamp = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 7, true);\n\n            if (timeStamp !== oldTimeStamp && eventCount !== oldEventCount) {\n                state.EventCount = eventCount;\n                if (oldEventCount > eventCount) {\n                    // Hit rollover value\n                    eventCount += 255;\n                }\n\n                state.TimeStamp = timeStamp;\n                if (oldTimeStamp > timeStamp) {\n                    // Hit rollover value\n                    timeStamp += 65400;\n                }\n\n                state.Slope = slope;\n                state.TorqueTicksStamp = torqueTicksStamp;\n                if (oldTorqueTicksStamp > torqueTicksStamp) {\n                    // Hit rollover value\n                    torqueTicksStamp += 65535;\n                }\n\n                const elapsedTime = (timeStamp - oldTimeStamp) * 0.0005;\n                const torqueTicks = torqueTicksStamp - oldTorqueTicksStamp;\n\n                const cadencePeriod = elapsedTime / (eventCount - oldEventCount); // seconds\n                const cadence = Math.round(60 / cadencePeriod); // RPM\n                state.CalculatedCadence = cadence;\n\n                const torqueFrequency = 1 / (elapsedTime / torqueTicks) - state.offset; // Hz\n                const torque = torqueFrequency / (slope / 10); // Nm\n                state.CalculatedTorque = torque;\n\n                state.CalculatedPower = (torque * cadence * Math.PI) / 30; // Watts\n            }\n            break;\n        }\n        default:\n            return;\n    }\n    sensor.emit(\"powerData\", state);\n}\n","/**\n * Represents the state of a Bicycle Power sensor.\n * Stores various metrics and calculated values related to bicycle power, such as pedal power, cadence, torque, and power.\n */\nexport class BicyclePowerSensorState {\n    /**\n     * Creates an instance of BicyclePowerSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The total pedal power percentage.\n     * Represents the percentage of power produced by the pedal strokes.\n     * @type {number | undefined}\n     */\n    PedalPower?: number;\n\n    /**\n     * The power percentage from the right pedal.\n     * If available, represents the contribution of the right pedal to the total power.\n     * @type {number | undefined}\n     */\n    RightPedalPower?: number;\n\n    /**\n     * The power percentage from the left pedal.\n     * If available, represents the contribution of the left pedal to the total power.\n     * @type {number | undefined}\n     */\n    LeftPedalPower?: number;\n\n    /**\n     * The cadence value in revolutions per minute (RPM).\n     * Represents the number of pedal revolutions per minute.\n     * @type {number | undefined}\n     */\n    Cadence?: number;\n\n    /**\n     * The accumulated power in watts.\n     * Represents the total power output accumulated over time.\n     * @type {number | undefined}\n     */\n    AccumulatedPower?: number;\n\n    /**\n     * The current power output in watts.\n     * Represents the instantaneous power output of the cyclist.\n     * @type {number | undefined}\n     */\n    Power?: number;\n\n    /**\n     * The offset value used for torque calculations.\n     * @type {number}\n     * @default 0\n     */\n    offset: number = 0;\n\n    /**\n     * The event count value.\n     * Represents the number of events recorded by the sensor.\n     * @type {number | undefined}\n     */\n    EventCount?: number;\n\n    /**\n     * The timestamp of the last recorded event.\n     * Represents the time at which the last event was recorded.\n     * @type {number | undefined}\n     */\n    TimeStamp?: number;\n\n    /**\n     * The slope value used for torque calculations.\n     * Represents the slope or gradient used in the torque computation.\n     * @type {number | undefined}\n     */\n    Slope?: number;\n\n    /**\n     * The timestamp for the last torque tick.\n     * Represents the time at which the last torque measurement was recorded.\n     * @type {number | undefined}\n     */\n    TorqueTicksStamp?: number;\n\n    /**\n     * The calculated cadence in RPM.\n     * Represents the calculated cadence based on sensor data.\n     * @type {number | undefined}\n     */\n    CalculatedCadence?: number;\n\n    /**\n     * The calculated torque in Newton meters (Nm).\n     * Represents the torque calculated from sensor data.\n     * @type {number | undefined}\n     */\n    CalculatedTorque?: number;\n\n    /**\n     * The calculated power in watts.\n     * Represents the power calculated from torque and cadence data.\n     * @type {number | undefined}\n     */\n    CalculatedPower?: number;\n}\n","import { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\n\n/**\n * Represents the scan state of a Bicycle Power sensor.\n * Extends the BicyclePowerSensorState to include additional data related to signal quality during a scan.\n */\nexport class BicyclePowerScanState extends BicyclePowerSensorState {\n    /**\n     * Received Signal Strength Indicator (RSSI).\n     * Represents the strength of the received signal from the sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The threshold value for the RSSI.\n     * Represents the minimum acceptable signal strength for communication.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\n */\n\nimport { updateState } from \"./bicyclePowerUtils.js\";\nimport { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents a Bicycle Power sensor.\n * This class extends the AntPlusSensor class to handle specific data related to bicycle power measurement.\n *\n * @category Sensors\n */\nexport class BicyclePowerSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Power sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x0b;\n\n    /**\n     * The current state of the Bicycle Power sensor.\n     * @private\n     * @type {BicyclePowerSensorState}\n     */\n    private state!: BicyclePowerSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new BicyclePowerSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, BicyclePowerSensor.deviceType, 0, 255, 8182);\n        this.state = new BicyclePowerSensorState(deviceId);\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { Messages } from \"../../utils/messages.js\";\nimport { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\nimport { FitnessEquipmentScanState } from \"./fitnessEquipmentScanState.js\";\nimport { FitnessEquipmentSensor } from \"./fitnessEquipmentSensor.js\";\nimport { FitnessEquipmentScanner } from \"./fitnessEquipmentScanner.js\";\n\n/**\n * Resets the state of the fitness equipment sensor by deleting all relevant properties.\n *\n * @param {FitnessEquipmentSensorState | FitnessEquipmentScanState} state - The state object of the fitness equipment sensor to reset.\n * @returns {void}\n */\nfunction resetState(state: FitnessEquipmentSensorState | FitnessEquipmentScanState): void {\n    delete state.ElapsedTime;\n    delete state.Distance;\n    delete state.RealSpeed;\n    delete state.VirtualSpeed;\n    delete state.HeartRate;\n    delete state.HeartRateSource;\n    delete state.CycleLength;\n    delete state.Incline;\n    delete state.Resistance;\n    delete state.METs;\n    delete state.CaloricBurnRate;\n    delete state.Calories;\n    delete state._EventCount0x19;\n    delete state._EventCount0x1A;\n    delete state.Cadence;\n    delete state.AccumulatedPower;\n    delete state.InstantaneousPower;\n    delete state.AveragePower;\n    delete state.TrainerStatus;\n    delete state.TargetStatus;\n    delete state.AscendedDistance;\n    delete state.DescendedDistance;\n    delete state.Strides;\n    delete state.Strokes;\n    delete state.WheelTicks;\n    delete state.WheelPeriod;\n    delete state.Torque;\n}\n\n/**\n * Updates the state of the fitness equipment sensor or scanner based on the received data.\n *\n * @param {FitnessEquipmentSensor | FitnessEquipmentScanner} sensor - The sensor or scanner instance to update.\n * @param {FitnessEquipmentSensorState | FitnessEquipmentScanState} state - The current state of the sensor or scanner.\n * @param {DataView} data - The raw data buffer received from the fitness equipment.\n * @returns {void}\n *\n * @example\n * updateState(sensor, state, data);\n */\nexport function updateState(sensor: FitnessEquipmentSensor | FitnessEquipmentScanner, state: FitnessEquipmentSensorState | FitnessEquipmentScanState, data: DataView): void {\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n    switch (page) {\n        case 0x01: {\n            const temperature = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            if (temperature !== 0xff) {\n                state.Temperature = -25 + temperature * 0.5;\n            }\n            const calBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            if (calBF & 0x40) {\n                state.ZeroOffset = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            }\n            if (calBF & 0x80) {\n                state.SpinDownTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n            }\n            break;\n        }\n        case 0x10: {\n            const equipmentTypeBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            switch (equipmentTypeBF & 0x1f) {\n                case 19:\n                    state.EquipmentType = \"Treadmill\";\n                    break;\n                case 20:\n                    state.EquipmentType = \"Elliptical\";\n                    break;\n                case 21:\n                    state.EquipmentType = \"Reserved\";\n                    break;\n                case 22:\n                    state.EquipmentType = \"Rower\";\n                    break;\n                case 23:\n                    state.EquipmentType = \"Climber\";\n                    break;\n                case 24:\n                    state.EquipmentType = \"NordicSkier\";\n                    break;\n                case 25:\n                    state.EquipmentType = \"Trainer/StationaryBike\";\n                    break;\n                default:\n                    state.EquipmentType = \"General\";\n                    break;\n            }\n            let elapsedTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let distance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const speed = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            const heartRate = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const capStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n            if (heartRate !== 0xff) {\n                switch (capStateBF & 0x03) {\n                    case 3: {\n                        state.HeartRate = heartRate;\n                        state.HeartRateSource = \"HandContact\";\n                        break;\n                    }\n                    case 2: {\n                        state.HeartRate = heartRate;\n                        state.HeartRateSource = \"EM\";\n                        break;\n                    }\n                    case 1: {\n                        state.HeartRate = heartRate;\n                        state.HeartRateSource = \"ANT+\";\n                        break;\n                    }\n                    default: {\n                        delete state.HeartRate;\n                        delete state.HeartRateSource;\n                        break;\n                    }\n                }\n            }\n\n            elapsedTime /= 4;\n            const oldElapsedTime = (state.ElapsedTime || 0) % 64;\n            if (elapsedTime !== oldElapsedTime) {\n                if (oldElapsedTime > elapsedTime) {\n                    // Hit rollover value\n                    elapsedTime += 64;\n                }\n            }\n            state.ElapsedTime = (state.ElapsedTime || 0) + elapsedTime - oldElapsedTime;\n\n            if (capStateBF & 0x04) {\n                const oldDistance = (state.Distance || 0) % 256;\n                if (distance !== oldDistance) {\n                    if (oldDistance > distance) {\n                        // Hit rollover value\n                        distance += 256;\n                    }\n                }\n                state.Distance = (state.Distance || 0) + distance - oldDistance;\n            } else {\n                delete state.Distance;\n            }\n            if (capStateBF & 0x08) {\n                state.VirtualSpeed = speed / 1000;\n                delete state.RealSpeed;\n            } else {\n                delete state.VirtualSpeed;\n                state.RealSpeed = speed / 1000;\n            }\n            switch ((capStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (capStateBF & 0x80) {\n                // lap\n            }\n            break;\n        }\n        case 0x11: {\n            const cycleLen = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const incline = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            const resistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const capStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n            if (cycleLen !== 0xff) {\n                state.CycleLength = cycleLen / 100;\n            }\n            if (incline >= -10000 && incline <= 10000) {\n                state.Incline = incline / 100;\n            }\n            if (resistance !== 0xff) {\n                state.Resistance = resistance;\n            }\n            switch ((capStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (capStateBF & 0x80) {\n                // lap\n            }\n            break;\n        }\n        case 0x12: {\n            const mets = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true);\n            const caloricbr = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            const calories = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const capStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n            if (mets !== 0xffff) {\n                state.METs = mets / 100;\n            }\n            if (caloricbr !== 0xffff) {\n                state.CaloricBurnRate = caloricbr / 10;\n            }\n            if (capStateBF & 0x01) {\n                state.Calories = calories;\n            }\n            switch ((capStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (capStateBF & 0x80) {\n                // lap\n            }\n            break;\n        }\n        case 0x13: {\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            let negDistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            let posDistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (flagStateBF & 0x02) {\n                const oldNegDistance = (state.DescendedDistance || 0) % 256;\n                if (negDistance !== oldNegDistance) {\n                    if (oldNegDistance > negDistance) {\n                        negDistance += 256;\n                    }\n                }\n                state.DescendedDistance = (state.DescendedDistance || 0) + negDistance - oldNegDistance;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldPosDistance = (state.AscendedDistance || 0) % 256;\n                if (posDistance !== oldPosDistance) {\n                    if (oldPosDistance > posDistance) {\n                        posDistance += 256;\n                    }\n                }\n                state.AscendedDistance = (state.AscendedDistance || 0) + posDistance - oldPosDistance;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x14: {\n            let posDistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let strides = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x02) {\n                const oldPosDistance = (state.AscendedDistance || 0) % 256;\n                if (posDistance !== oldPosDistance) {\n                    if (oldPosDistance > posDistance) {\n                        posDistance += 256;\n                    }\n                }\n                state.AscendedDistance = (state.AscendedDistance || 0) + posDistance - oldPosDistance;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrides = (state.Strides || 0) % 256;\n                if (strides !== oldStrides) {\n                    if (oldStrides > strides) {\n                        strides += 256;\n                    }\n                }\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x16: {\n            let strokes = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrokes = (state.Strokes || 0) % 256;\n                if (strokes !== oldStrokes) {\n                    if (oldStrokes > strokes) {\n                        strokes += 256;\n                    }\n                }\n                state.Strokes = (state.Strokes || 0) + strokes - oldStrokes;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x17: {\n            let strides = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrides = (state.Strides || 0) % 256;\n                if (strides !== oldStrides) {\n                    if (oldStrides > strides) {\n                        strides += 256;\n                    }\n                }\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x18: {\n            let strides = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrides = (state.Strides || 0) % 256;\n                if (strides !== oldStrides) {\n                    if (oldStrides > strides) {\n                        strides += 256;\n                    }\n                }\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x19: {\n            const oldEventCount = state._EventCount0x19 || 0;\n\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let accPower = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true) & 0xfff;\n            const trainerStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6) >> 4;\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (eventCount !== oldEventCount) {\n                state._EventCount0x19 = eventCount;\n                if (oldEventCount > eventCount) {\n                    //Hit rollover value\n                    eventCount += 255;\n                }\n            }\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xfff) {\n                state.InstantaneousPower = power;\n\n                const oldAccPower = (state.AccumulatedPower || 0) % 65536;\n                if (accPower !== oldAccPower) {\n                    if (oldAccPower > accPower) {\n                        accPower += 65536;\n                    }\n                }\n                state.AccumulatedPower = (state.AccumulatedPower || 0) + accPower - oldAccPower;\n\n                state.AveragePower = (accPower - oldAccPower) / (eventCount - oldEventCount);\n            }\n\n            state.TrainerStatus = trainerStatus;\n\n            switch (flagStateBF & 0x03) {\n                case 0:\n                    state.TargetStatus = \"OnTarget\";\n                    break;\n                case 1:\n                    state.TargetStatus = \"LowSpeed\";\n                    break;\n                case 2:\n                    state.TargetStatus = \"HighSpeed\";\n                    break;\n                default:\n                    delete state.TargetStatus;\n                    break;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x1a: {\n            const oldEventCount = state._EventCount0x1A || 0;\n\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            let wheelTicks = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let accWheelPeriod = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\n            let accTorque = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (eventCount !== oldEventCount) {\n                state._EventCount0x1A = eventCount;\n                if (oldEventCount > eventCount) {\n                    //Hit rollover value\n                    eventCount += 255;\n                }\n            }\n\n            const oldWheelTicks = (state.WheelTicks || 0) % 256;\n            if (wheelTicks !== oldWheelTicks) {\n                if (oldWheelTicks > wheelTicks) {\n                    wheelTicks += 65536;\n                }\n            }\n            state.WheelTicks = (state.WheelTicks || 0) + wheelTicks - oldWheelTicks;\n\n            const oldWheelPeriod = (state.WheelPeriod || 0) % 256;\n            if (accWheelPeriod !== oldWheelPeriod) {\n                if (oldWheelPeriod > accWheelPeriod) {\n                    accWheelPeriod += 65536;\n                }\n            }\n            state.WheelPeriod = (state.WheelPeriod || 0) + accWheelPeriod - oldWheelPeriod;\n\n            const oldTorque = (state.Torque || 0) % 256;\n            if (accTorque !== oldTorque) {\n                if (oldTorque > accTorque) {\n                    accTorque += 65536;\n                }\n            }\n            state.Torque = (state.Torque || 0) + accTorque - oldTorque;\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x50: {\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.ManId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            state.ModelNum = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n            break;\n        }\n        case 0x51: {\n            const swRevSup = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const swRevMain = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const serial = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n\n            state.SwVersion = swRevMain;\n\n            if (swRevSup !== 0xff) {\n                state.SwVersion += swRevSup / 1000;\n            }\n\n            if (serial !== 0xffffffff) {\n                state.SerialNumber = serial;\n            }\n\n            break;\n        }\n        case 0x56: {\n            const idx = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const tot = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const chState = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const devId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const trType = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const devType = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (idx === 0) {\n                state.PairedDevices = [];\n            }\n\n            if (tot > 0) {\n                state.PairedDevices.push({\n                    id: devId,\n                    type: devType,\n                    paired: chState & 0x80 ? true : false,\n                });\n            }\n\n            break;\n        }\n        default:\n            return;\n    }\n    sensor.emit(\"fitnessData\", state);\n}\n","import { PairedDevice } from \"../../types/pairedDevice.js\";\n\n/**\n * Represents the state of a Fitness Equipment sensor.\n * This class holds the data fields associated with the state of a fitness equipment sensor,\n * including metrics such as heart rate, speed, distance, power, and more.\n */\nexport class FitnessEquipmentSensorState {\n    /**\n     * Creates an instance of the FitnessEquipmentSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new FitnessEquipmentSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The event count for page 0x19.\n     * @type {number | undefined}\n     */\n    _EventCount0x19?: number;\n\n    /**\n     * The event count for page 0x1A.\n     * @type {number | undefined}\n     */\n    _EventCount0x1A?: number;\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The temperature measured by the sensor, in degrees Celsius.\n     * @type {number | undefined}\n     */\n    Temperature?: number;\n\n    /**\n     * The zero offset calibration value for the sensor.\n     * @type {number | undefined}\n     */\n    ZeroOffset?: number;\n\n    /**\n     * The spin-down time for the sensor, in seconds.\n     * @type {number | undefined}\n     */\n    SpinDownTime?: number;\n\n    /**\n     * The type of fitness equipment.\n     * Can be \"Treadmill\", \"Elliptical\", \"Reserved\", \"Rower\", \"Climber\", \"NordicSkier\", \"Trainer/StationaryBike\", or \"General\".\n     * @type {\"Treadmill\" | \"Elliptical\" | \"Reserved\" | \"Rower\" | \"Climber\" | \"NordicSkier\" | \"Trainer/StationaryBike\" | \"General\" | undefined}\n     */\n    EquipmentType?: \"Treadmill\" | \"Elliptical\" | \"Reserved\" | \"Rower\" | \"Climber\" | \"NordicSkier\" | \"Trainer/StationaryBike\" | \"General\";\n\n    /**\n     * The total elapsed time, in seconds.\n     * @type {number | undefined}\n     */\n    ElapsedTime?: number;\n\n    /**\n     * The total distance traveled, in meters.\n     * @type {number | undefined}\n     */\n    Distance?: number;\n\n    /**\n     * The real speed of the equipment, in meters per second.\n     * @type {number | undefined}\n     */\n    RealSpeed?: number;\n\n    /**\n     * The virtual speed of the equipment, in meters per second.\n     * @type {number | undefined}\n     */\n    VirtualSpeed?: number;\n\n    /**\n     * The current heart rate, in beats per minute (BPM).\n     * @type {number | undefined}\n     */\n    HeartRate?: number;\n\n    /**\n     * The source of the heart rate data.\n     * Can be \"HandContact\", \"EM\", or \"ANT+\".\n     * @type {\"HandContact\" | \"EM\" | \"ANT+\" | undefined}\n     */\n    HeartRateSource?: \"HandContact\" | \"EM\" | \"ANT+\";\n\n    /**\n     * The state of the equipment.\n     * Can be \"OFF\", \"READY\", \"IN_USE\", or \"FINISHED\".\n     * @type {\"OFF\" | \"READY\" | \"IN_USE\" | \"FINISHED\" | undefined}\n     */\n    State?: \"OFF\" | \"READY\" | \"IN_USE\" | \"FINISHED\";\n\n    /**\n     * The cycle length of the equipment, in meters.\n     * @type {number | undefined}\n     */\n    CycleLength?: number;\n\n    /**\n     * The incline of the equipment, in percentage.\n     * @type {number | undefined}\n     */\n    Incline?: number;\n\n    /**\n     * The resistance level of the equipment.\n     * @type {number | undefined}\n     */\n    Resistance?: number;\n\n    /**\n     * The metabolic equivalent (MET) value.\n     * @type {number | undefined}\n     */\n    METs?: number;\n\n    /**\n     * The caloric burn rate, in kilocalories per hour.\n     * @type {number | undefined}\n     */\n    CaloricBurnRate?: number;\n\n    /**\n     * The total calories burned.\n     * @type {number | undefined}\n     */\n    Calories?: number;\n\n    /**\n     * The distance ascended, in meters.\n     * @type {number | undefined}\n     */\n    AscendedDistance?: number;\n\n    /**\n     * The distance descended, in meters.\n     * @type {number | undefined}\n     */\n    DescendedDistance?: number;\n\n    /**\n     * The total number of strides taken.\n     * @type {number | undefined}\n     */\n    Strides?: number;\n\n    /**\n     * The total number of strokes taken.\n     * @type {number | undefined}\n     */\n    Strokes?: number;\n\n    /**\n     * The current cadence, in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    Cadence?: number;\n\n    /**\n     * The total accumulated power output, in watts.\n     * @type {number | undefined}\n     */\n    AccumulatedPower?: number;\n\n    /**\n     * The instantaneous power output, in watts.\n     * @type {number | undefined}\n     */\n    InstantaneousPower?: number;\n\n    /**\n     * The average power output, in watts.\n     * @type {number | undefined}\n     */\n    AveragePower?: number;\n\n    /**\n     * The trainer status, typically indicating the current mode or condition of the trainer.\n     * @type {number | undefined}\n     */\n    TrainerStatus?: number;\n\n    /**\n     * The target status of the equipment.\n     * Can be \"OnTarget\", \"LowSpeed\", or \"HighSpeed\".\n     * @type {\"OnTarget\" | \"LowSpeed\" | \"HighSpeed\" | undefined}\n     */\n    TargetStatus?: \"OnTarget\" | \"LowSpeed\" | \"HighSpeed\";\n\n    /**\n     * The total number of wheel ticks.\n     * @type {number | undefined}\n     */\n    WheelTicks?: number;\n\n    /**\n     * The wheel period, in seconds.\n     * @type {number | undefined}\n     */\n    WheelPeriod?: number;\n\n    /**\n     * The torque value, in newton-meters.\n     * @type {number | undefined}\n     */\n    Torque?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The list of paired devices associated with the sensor.\n     * @type {PairedDevice[]}\n     */\n    PairedDevices: PairedDevice[] = [];\n}\n","import { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\n\n/**\n * Represents the state of a Fitness Equipment sensor during scanning.\n * Extends the FitnessEquipmentSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class FitnessEquipmentScanState extends FitnessEquipmentSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the fitness equipment sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\n */\n\nimport { updateState } from \"./fitnessEquipmentUtils.js\";\nimport { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { SendCallback } from \"../../types/sendCallback.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Represents a Fitness Equipment sensor.\n * This class extends the AntPlusSensor class to handle specific data related to fitness equipment.\n *\n * @category Sensors\n */\nexport class FitnessEquipmentSensor extends AntPlusSensor {\n    /**\n     * The device type code for Fitness Equipment sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x11;\n\n    /**\n     * The current state of the Fitness Equipment sensor.\n     * @private\n     * @type {FitnessEquipmentSensorState}\n     */\n    private state!: FitnessEquipmentSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new FitnessEquipmentSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, FitnessEquipmentSensor.deviceType, 0, 255, 8192);\n        this.state = new FitnessEquipmentSensorState(deviceId);\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n\n    /**\n     * Sends user configuration data to the sensor internally.\n     *\n     * @private\n     * @param {number} [userWeight] - The user's weight in kilograms.\n     * @param {number} [bikeWeight] - The weight of the bike in kilograms.\n     * @param {number} [wheelDiameter] - The diameter of the wheel in meters.\n     * @param {number} [gearRatio] - The gear ratio.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     */\n    private async setUserConfigurationInternal(userWeight?: number, bikeWeight?: number, wheelDiameter?: number, gearRatio?: number, cbk?: SendCallback): Promise<void> {\n        const m = userWeight == null ? 0xffff : Math.max(0, Math.min(65534, Math.round(userWeight * 100)));\n        const df = wheelDiameter == null ? 0xff : Math.round(wheelDiameter * 10) % 10;\n        const mb = bikeWeight == null ? 0xfff : Math.max(0, Math.min(1000, Math.round(bikeWeight * 20)));\n        const d = wheelDiameter == null ? 0xff : Math.max(0, Math.min(254, Math.round(wheelDiameter)));\n        const gr = gearRatio == null ? 0x00 : Math.max(1, Math.min(255, Math.round(gearRatio / 0.03)));\n        const payload = [0x37, m & 0xff, (m >> 8) & 0xff, 0xff, (df & 0xf) | ((mb & 0xf) << 4), (mb >> 4) & 0xf, d & 0xff, gr & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        await this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the user configuration for the sensor.\n     *\n     * @public\n     * @param {number|SendCallback} [userWeightOrCallback] - The user's weight in kilograms or a callback function.\n     * @param {number} [bikeWeight] - The weight of the bike in kilograms.\n     * @param {number} [wheelDiameter] - The diameter of the wheel in meters.\n     * @param {number} [gearRatio] - The gear ratio.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setUserConfiguration(70, 10, 0.7, 3.5, callbackFunction);\n     */\n    public async setUserConfiguration(userWeightOrCallback?: number | SendCallback, bikeWeight?: number, wheelDiameter?: number, gearRatio?: number, cbk?: SendCallback): Promise<void> {\n        if (typeof userWeightOrCallback === \"function\") {\n            await this.setUserConfigurationInternal(undefined, undefined, undefined, undefined, userWeightOrCallback);\n        } else if (typeof bikeWeight === \"function\") {\n            await this.setUserConfigurationInternal(userWeightOrCallback, undefined, undefined, undefined, bikeWeight);\n        } else if (typeof wheelDiameter === \"function\") {\n            await this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, undefined, undefined, wheelDiameter);\n        } else if (typeof gearRatio === \"function\") {\n            await this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, wheelDiameter, undefined, gearRatio);\n        } else {\n            await this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, wheelDiameter, gearRatio, cbk);\n        }\n    }\n\n    /**\n     * Sets the basic resistance level on the fitness equipment.\n     *\n     * @public\n     * @param {number} resistance - The resistance level to set (0 to 100).\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setBasicResistance(50, callbackFunction);\n     */\n    public async setBasicResistance(resistance: number, cbk?: SendCallback): Promise<void> {\n        const res = Math.max(0, Math.min(200, Math.round(resistance * 2)));\n        const payload = [0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, res & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        await this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the target power level on the fitness equipment.\n     *\n     * @public\n     * @param {number} power - The target power level in watts.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setTargetPower(250, callbackFunction);\n     */\n    public async setTargetPower(power: number, cbk?: SendCallback): Promise<void> {\n        const p = Math.max(0, Math.min(4000, Math.round(power * 4)));\n        const payload = [0x31, 0xff, 0xff, 0xff, 0xff, 0xff, p & 0xff, (p >> 8) & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        await this.send(msg, cbk);\n    }\n\n    /**\n     * Sends wind resistance data to the sensor internally.\n     *\n     * @private\n     * @param {number} [windCoeff] - The wind resistance coefficient.\n     * @param {number} [windSpeed] - The wind speed in km/h.\n     * @param {number} [draftFactor] - The drafting factor (0 to 1).\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     */\n    private async setWindResistanceInternal(windCoeff?: number, windSpeed?: number, draftFactor?: number, cbk?: SendCallback): Promise<void> {\n        const wc = windCoeff == null ? 0xff : Math.max(0, Math.min(186, Math.round(windCoeff * 100)));\n        const ws = windSpeed == null ? 0xff : Math.max(0, Math.min(254, Math.round(windSpeed + 127)));\n        const df = draftFactor == null ? 0xff : Math.max(0, Math.min(100, Math.round(draftFactor * 100)));\n        const payload = [0x32, 0xff, 0xff, 0xff, 0xff, wc & 0xff, ws & 0xff, df & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        await this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the wind resistance on the fitness equipment.\n     *\n     * @public\n     * @param {number|SendCallback} [windCoeffOrCallback] - The wind resistance coefficient or a callback function.\n     * @param {number} [windSpeed] - The wind speed in km/h.\n     * @param {number} [draftFactor] - The drafting factor (0 to 1).\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setWindResistance(0.5, 20, 0.1, callbackFunction);\n     */\n    public async setWindResistance(windCoeffOrCallback?: number | SendCallback, windSpeed?: number, draftFactor?: number, cbk?: SendCallback): Promise<void> {\n        if (typeof windCoeffOrCallback === \"function\") {\n            await this.setWindResistanceInternal(undefined, undefined, undefined, windCoeffOrCallback);\n        } else if (typeof windSpeed === \"function\") {\n            await this.setWindResistanceInternal(windCoeffOrCallback, undefined, undefined, windSpeed);\n        } else if (typeof draftFactor === \"function\") {\n            await this.setWindResistanceInternal(windCoeffOrCallback, windSpeed, undefined, draftFactor);\n        } else {\n            await this.setWindResistanceInternal(windCoeffOrCallback, windSpeed, draftFactor, cbk);\n        }\n    }\n\n    /**\n     * Sends track resistance data to the sensor internally.\n     *\n     * @private\n     * @param {number} [slope] - The track slope percentage.\n     * @param {number} [rollingResistanceCoeff] - The rolling resistance coefficient.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     */\n    private async setTrackResistanceInternal(slope?: number, rollingResistanceCoeff?: number, cbk?: SendCallback): Promise<void> {\n        const s = slope == null ? 0xffff : Math.max(0, Math.min(40000, Math.round((slope + 200) * 100)));\n        const rr = rollingResistanceCoeff == null ? 0xff : Math.max(0, Math.min(254, Math.round(rollingResistanceCoeff * 20000)));\n        const payload = [0x33, 0xff, 0xff, 0xff, 0xff, s & 0xff, (s >> 8) & 0xff, rr & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        await this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the track resistance on the fitness equipment.\n     *\n     * @public\n     * @param {number|SendCallback} [slopeOrCallback] - The track slope percentage or a callback function.\n     * @param {number} [rollingResistanceCoeff] - The rolling resistance coefficient.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setTrackResistance(5, 0.005, callbackFunction);\n     */\n    public async setTrackResistance(slopeOrCallback?: number | SendCallback, rollingResistanceCoeff?: number, cbk?: SendCallback): Promise<void> {\n        if (typeof slopeOrCallback === \"function\") {\n            await this.setTrackResistanceInternal(undefined, undefined, slopeOrCallback);\n        } else if (typeof rollingResistanceCoeff === \"function\") {\n            await this.setTrackResistanceInternal(slopeOrCallback, undefined, rollingResistanceCoeff);\n        } else {\n            await this.setTrackResistanceInternal(slopeOrCallback, rollingResistanceCoeff, cbk);\n        }\n    }\n}\n","import { Messages } from \"../../utils/messages.js\";\nimport { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\nimport { MuscleOxygenScanState } from \"./muscleOxygenScanState.js\";\nimport { MuscleOxygenSensor } from \"./muscleOxygenSensor.js\";\nimport { MuscleOxygenScanner } from \"./muscleOxygenScanner.js\";\n\n/**\n * Updates the state of a Muscle Oxygen sensor or scanner based on the incoming data.\n * Decodes various pages of data to update the state, including event counts, sensor capabilities,\n * measurement intervals, total hemoglobin concentration, and battery status.\n *\n * @param {MuscleOxygenSensor | MuscleOxygenScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {MuscleOxygenSensorState | MuscleOxygenScanState} state - The current state of the sensor or scanner.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new MuscleOxygenSensor();\n * const state = new MuscleOxygenSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: MuscleOxygenSensor | MuscleOxygenScanner, state: MuscleOxygenSensorState | MuscleOxygenScanState, data: DataView) {\n    const oldEventCount = state._EventCount || 0;\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n\n    switch (page) {\n        case 0x01: {\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const notifications = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const capabilities = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\n            const total = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true) & 0xfff;\n            const previous = (data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true) >> 4) & 0x3ff;\n            const current = (data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true) >> 6) & 0x3ff;\n\n            if (eventCount !== oldEventCount) {\n                state._EventCount = eventCount;\n                if (oldEventCount > eventCount) {\n                    // Hit rollover value\n                    eventCount += 255;\n                }\n            }\n\n            state.UTCTimeRequired = (notifications & 0x01) === 0x01;\n            state.SupportANTFS = (capabilities & 0x01) === 0x01;\n\n            switch ((capabilities >> 1) & 0x7) {\n                case 1:\n                    state.MeasurementInterval = 0.25;\n                    break;\n                case 2:\n                    state.MeasurementInterval = 0.5;\n                    break;\n                case 3:\n                    state.MeasurementInterval = 1;\n                    break;\n                case 4:\n                    state.MeasurementInterval = 2;\n                    break;\n                default:\n                    delete state.MeasurementInterval;\n            }\n\n            switch (total) {\n                case 0xffe:\n                    state.TotalHemoglobinConcentration = \"AmbientLightTooHigh\";\n                    break;\n                case 0xfff:\n                    state.TotalHemoglobinConcentration = \"Invalid\";\n                    break;\n                default:\n                    state.TotalHemoglobinConcentration = total;\n            }\n\n            switch (previous) {\n                case 0x3fe:\n                    state.PreviousSaturatedHemoglobinPercentage = \"AmbientLightTooHigh\";\n                    break;\n                case 0x3ff:\n                    state.PreviousSaturatedHemoglobinPercentage = \"Invalid\";\n                    break;\n                default:\n                    state.PreviousSaturatedHemoglobinPercentage = previous;\n            }\n\n            switch (current) {\n                case 0x3fe:\n                    state.CurrentSaturatedHemoglobinPercentage = \"AmbientLightTooHigh\";\n                    break;\n                case 0x3ff:\n                    state.CurrentSaturatedHemoglobinPercentage = \"Invalid\";\n                    break;\n                default:\n                    state.CurrentSaturatedHemoglobinPercentage = current;\n            }\n\n            break;\n        }\n        case 0x50: {\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.ManId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n            state.ModelNum = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n            break;\n        }\n        case 0x51: {\n            const swRevSup = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const swRevMain = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const serial = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\n\n            state.SwVersion = swRevMain;\n\n            if (swRevSup !== 0xff) {\n                state.SwVersion += swRevSup / 1000;\n            }\n\n            if (serial !== 0xffffffff) {\n                state.SerialNumber = serial;\n            }\n\n            break;\n        }\n        case 0x52: {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const batteryId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const operatingTime = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 3, true) & 0xffffff;\n            const batteryFrac = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\n            const batteryStatus = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 7, true);\n\n            state.OperatingTime = operatingTime * ((batteryStatus & 0x80) === 0x80 ? 2 : 16);\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\n            state.BatteryStatusBit = batteryFlags;\n            switch (batteryFlags) {\n                case 1:\n                    state.BatteryStatus = \"New\";\n                    break;\n                case 2:\n                    state.BatteryStatus = \"Good\";\n                    break;\n                case 3:\n                    state.BatteryStatus = \"Ok\";\n                    break;\n                case 4:\n                    state.BatteryStatus = \"Low\";\n                    break;\n                case 5:\n                    state.BatteryStatus = \"Critical\";\n                    break;\n                default:\n                    state.BatteryVoltage = undefined;\n                    state.BatteryStatus = \"Invalid\";\n                    break;\n            }\n            break;\n        }\n        default:\n            return;\n    }\n    if (page !== 0x01 || state._EventCount !== oldEventCount) {\n        sensor.emit(\"oxygenData\", state);\n    }\n}\n","/**\n * Represents the state of a Muscle Oxygen sensor.\n * This class holds the data fields associated with the state of a Muscle Oxygen sensor, including\n * event count, device details, measurement data, and battery status.\n */\nexport class MuscleOxygenSensorState {\n    /**\n     * Creates an instance of the MuscleOxygenSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new MuscleOxygenSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The count of events detected by the sensor.\n     * @type {number | undefined}\n     */\n    _EventCount?: number;\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * Indicates whether UTC time is required by the sensor.\n     * @type {boolean | undefined}\n     */\n    UTCTimeRequired?: boolean;\n\n    /**\n     * Indicates whether ANT-FS is supported by the sensor.\n     * @type {boolean | undefined}\n     */\n    SupportANTFS?: boolean;\n\n    /**\n     * The measurement interval in seconds.\n     * Possible values: 0.25, 0.5, 1, or 2 seconds.\n     * @type {0.25 | 0.5 | 1 | 2 | undefined}\n     */\n    MeasurementInterval?: 0.25 | 0.5 | 1 | 2;\n\n    /**\n     * The total hemoglobin concentration.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    TotalHemoglobinConcentration?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The percentage of saturated hemoglobin from the previous measurement.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    PreviousSaturatedHemoglobinPercentage?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The percentage of saturated hemoglobin from the current measurement.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    CurrentSaturatedHemoglobinPercentage?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n}\n","import { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\n\n/**\n * Represents the state of a Muscle Oxygen sensor during scanning.\n * Extends the MuscleOxygenSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class MuscleOxygenScanState extends MuscleOxygenSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\n */\n\nimport { updateState } from \"./muscleOxygenUtils.js\";\nimport { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { SendCallback } from \"../../types/sendCallback.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Represents a Muscle Oxygen sensor.\n * This class extends the AntPlusSensor class to handle specific data related to muscle oxygen measurements.\n *\n * @category Sensors\n */\nexport class MuscleOxygenSensor extends AntPlusSensor {\n    /**\n     * The device type code for Muscle Oxygen sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x1f;\n\n    /**\n     * The current state of the Muscle Oxygen sensor.\n     * @private\n     * @type {MuscleOxygenSensorState}\n     */\n    private state!: MuscleOxygenSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new MuscleOxygenSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, MuscleOxygenSensor.deviceType, 0, 255, 8192);\n        this.state = new MuscleOxygenSensorState(deviceId);\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n\n    /**\n     * Sends a time-based command to the sensor.\n     *\n     * @private\n     * @param {number} cmd - The command code to be sent.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor._sendTimeCmd(0x00, callbackFunction);\n     */\n    private async _sendTimeCmd(cmd: number, cbk?: SendCallback): Promise<void> {\n        const now = new Date();\n        const utc = Math.round((now.getTime() - Date.UTC(1989, 11, 31, 0, 0, 0, 0)) / 1000);\n        const offset = -Math.round(now.getTimezoneOffset() / 15);\n        const payload = [0x10, cmd & 0xff, 0xff, offset & 0xff, (utc >> 0) & 0xff, (utc >> 8) & 0xff, (utc >> 16) & 0xff, (utc >> 24) & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        await this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the UTC time on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setUTCTime(callbackFunction);\n     */\n    public async setUTCTime(cbk?: SendCallback): Promise<void> {\n        await this._sendTimeCmd(0x00, cbk);\n    }\n\n    /**\n     * Starts a new session on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.startSession(callbackFunction);\n     */\n    public async startSession(cbk?: SendCallback): Promise<void> {\n        await this._sendTimeCmd(0x01, cbk);\n    }\n\n    /**\n     * Stops the current session on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.stopSession(callbackFunction);\n     */\n    public async stopSession(cbk?: SendCallback): Promise<void> {\n        await this._sendTimeCmd(0x02, cbk);\n    }\n\n    /**\n     * Sets a lap marker on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setLap(callbackFunction);\n     */\n    public async setLap(cbk?: SendCallback): Promise<void> {\n        await this._sendTimeCmd(0x03, cbk);\n    }\n}\n","import { EnvironmentScanner } from \"./environmentScanner.js\";\nimport { EnvironmentScanState } from \"./environmentScanState.js\";\nimport { EnvironmentSensor } from \"./environmentSensor.js\";\nimport { EnvironmentSensorState } from \"./environmentSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of an Environment sensor or scanner based on incoming data.\n * Decodes the data buffer and updates the sensor state accordingly.\n *\n * @param {EnvironmentSensor | EnvironmentScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {EnvironmentSensorState | EnvironmentScanState} state - The current state of the sensor or scanner.\n * @param {DataView} data - The raw data buffer received from the sensor.\n * @returns {void}\n */\nexport function updateState(sensor: EnvironmentSensor | EnvironmentScanner, state: EnvironmentSensorState | EnvironmentScanState, data: DataView): void {\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\n\n    if (page === 1) {\n        state.EventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n        state.Temperature = data.getInt16(Messages.BUFFER_INDEX_MSG_DATA + 6, true) / 100; // true for little-endian\n    }\n\n    sensor.emit(\"envdata\", state);\n    sensor.emit(\"envData\", state);\n}\n","/**\n * Represents the state of an Environment Sensor.\n * This class holds the data fields associated with the state of an environment sensor,\n * such as the event count and temperature.\n */\nexport class EnvironmentSensorState {\n    /**\n     * Creates an instance of the EnvironmentSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     *\n     * @example\n     * const sensorState = new EnvironmentSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The event count recorded by the sensor.\n     * @type {number | undefined}\n     */\n    EventCount: number | undefined;\n\n    /**\n     * The temperature measured by the sensor, in degrees Celsius.\n     * @type {number | undefined}\n     */\n    Temperature: number | undefined;\n}\n","import { EnvironmentSensorState } from \"./environmentSensorState.js\";\n\n/**\n * Represents the state of an Environment Sensor during scanning.\n * Extends the EnvironmentSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class EnvironmentScanState extends EnvironmentSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the environment sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#524_tab\n * Spec sheet: https://www.thisisant.com/resources/environment/\n */\n\nimport { updateState } from \"./environmentUtils.js\";\nimport { EnvironmentSensorState } from \"./environmentSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents an Environment sensor.\n * This class extends the AntPlusSensor class to handle specific data related to environmental monitoring.\n *\n * @category Sensors\n */\nexport class EnvironmentSensor extends AntPlusSensor {\n    /**\n     * The device type code for Environment sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 25;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new EnvironmentSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public async attach(channel: number, deviceId: number): Promise<void> {\n        await super.attachSensor(channel, \"receive\", deviceId, EnvironmentSensor.deviceType, 0, 255, 8192);\n        this.state = new EnvironmentSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Environment sensor.\n     * @private\n     * @type {EnvironmentSensorState}\n     */\n    private state!: EnvironmentSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { updateState } from \"./bicyclePowerUtils.js\";\nimport { BicyclePowerScanState } from \"./bicyclePowerScanState.js\";\nimport { BicyclePowerSensor } from \"./bicyclePowerSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Bicycle Power sensors.\n * Extends the AntPlusScanner class to handle scanning for multiple Bicycle Power sensors.\n *\n * @category Sensors\n */\nexport class BicyclePowerScanner extends AntPlusScanner {\n    /**\n     * Returns the device type for Bicycle Power sensors.\n     *\n     * @protected\n     * @returns {number} The device type identifier for Bicycle Power sensors.\n     */\n    protected deviceType() {\n        return BicyclePowerSensor.deviceType;\n    }\n\n    /**\n     * A collection of states for each detected Bicycle Power sensor, keyed by device ID.\n     * @private\n     * @type {{ [id: number]: BicyclePowerScanState }}\n     */\n    private states: { [id: number]: BicyclePowerScanState } = {};\n\n    /**\n     * Creates a new state entry for a Bicycle Power sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     */\n    protected createStateIfNew(deviceId: number) {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new BicyclePowerScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and threshold for a specific Bicycle Power sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator value.\n     * @param {number} threshold - The threshold value for the RSSI.\n     * @returns {void}\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number) {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a specific Bicycle Power sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: DataView) {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { updateState } from \"./cadenceUtils.js\";\nimport { CadenceScanState } from \"./cadenceScanState.js\";\nimport { CadenceSensor } from \"./cadenceSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Cadence sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple cadence sensors.\n *\n * @category Sensors\n */\nexport class CadenceScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Cadence sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Cadence sensors.\n     */\n    protected deviceType(): number {\n        return CadenceSensor.deviceType;\n    }\n\n    /**\n     * The wheel circumference used for cadence calculations, in meters.\n     * Defaults to 2.199 meters (70 cm wheel).\n     * @type {number}\n     */\n    wheelCircumference: number = 2.199;\n\n    /**\n     * Sets the wheel circumference for cadence calculations.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * A dictionary to store the states of detected Cadence sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: CadenceScanState }}\n     */\n    private states: { [id: number]: CadenceScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new CadenceScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { updateState } from \"./environmentUtils.js\";\nimport { EnvironmentScanState } from \"./environmentScanState.js\";\nimport { EnvironmentSensor } from \"./environmentSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Environment sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple environment sensors.\n *\n * @category Sensors\n */\nexport class EnvironmentScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Environment sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Environment sensors.\n     */\n    protected deviceType(): number {\n        return EnvironmentSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Environment sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: EnvironmentScanState }}\n     */\n    private states: { [id: number]: EnvironmentScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new EnvironmentScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { updateState } from \"./fitnessEquipmentUtils.js\";\nimport { FitnessEquipmentScanState } from \"./fitnessEquipmentScanState.js\";\nimport { FitnessEquipmentSensor } from \"./fitnessEquipmentSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Fitness Equipment sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple fitness equipment sensors.\n *\n * @category Sensors\n */\nexport class FitnessEquipmentScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Fitness Equipment sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Fitness Equipment sensors.\n     */\n    protected deviceType(): number {\n        return FitnessEquipmentSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Fitness Equipment sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: FitnessEquipmentScanState }}\n     */\n    private states: { [id: number]: FitnessEquipmentScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new FitnessEquipmentScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { DebugOptions } from \"../types/debugOptions.js\";\nimport { NodeUSBDriver } from \"./driver/nodeUSBDriver.js\";\n\n/**\n * Class representing a Garmin Stick 2 USB driver, which extends the base USBDriver class.\n *\n * @category Drivers\n * @extends NodeUSBDriver\n */\nexport class GarminStick2 extends NodeUSBDriver {\n    /**\n     * Creates an instance of GarminStick2.\n     *\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\n     *\n     * @example\n     * ```typescript\n     * const garminStick = new GarminStick2();\n     * garminStick.open(); // Opens the connection to the Garmin Stick 2 device.\n     * ```\n     */\n    constructor(debugOptions: DebugOptions = {}) {\n        super(0x0fcf, 0x1008, debugOptions);\n    }\n}\n\n/**\n * Class representing a Garmin Stick 3 USB driver, which extends the base USBDriver class.\n *\n * @category Drivers\n * @extends NodeUSBDriver\n */\nexport class GarminStick3 extends NodeUSBDriver {\n    /**\n     * Creates an instance of GarminStick3.\n     *\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\n     *\n     * @example\n     * ```typescript\n     * const garminStick = new GarminStick3({ usbDebugLevel: 1 });\n     * garminStick.open(); // Opens the connection to the Garmin Stick 3 device.\n     * ```\n     */\n    constructor(debugOptions: DebugOptions = {}) {\n        super(0x0fcf, 0x1009, debugOptions);\n    }\n}\n","import { Page, PageState, updateState } from \"./heartRateUtils.js\";\nimport { HeartRateScanState } from \"./heartRateScanState.js\";\nimport { HeartRateSensor } from \"./heartRateSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Heart Rate sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Heart Rate sensors.\n *\n * @category Sensors\n */\nexport class HeartRateScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Heart Rate sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Heart Rate sensors.\n     */\n    protected deviceType(): number {\n        return HeartRateSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Heart Rate sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: HeartRateScanState }}\n     */\n    private states: { [id: number]: HeartRateScanState } = {};\n\n    /**\n     * A dictionary to store page information for each detected Heart Rate sensor by their device ID.\n     * @private\n     * @type {{ [id: number]: Page }}\n     */\n    private pages: { [id: number]: Page } = {};\n\n    /**\n     * Creates a new state entry and page information for a sensor if they do not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state and page info for device ID 12345 if they do not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new HeartRateScanState(deviceId);\n        }\n\n        if (!this.pages[deviceId]) {\n            this.pages[deviceId] = { oldPage: -1, pageState: PageState.INIT_PAGE };\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Uint8Array} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], this.pages[deviceId], data);\n    }\n}\n","import { updateState } from \"./muscleOxygenUtils.js\";\nimport { MuscleOxygenScanState } from \"./muscleOxygenScanState.js\";\nimport { MuscleOxygenSensor } from \"./muscleOxygenSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Muscle Oxygen sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Muscle Oxygen sensors.\n *\n * @category Sensors\n */\nexport class MuscleOxygenScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Muscle Oxygen sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Muscle Oxygen sensors.\n     */\n    protected deviceType(): number {\n        return MuscleOxygenSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Muscle Oxygen sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: MuscleOxygenScanState }}\n     */\n    private states: { [id: number]: MuscleOxygenScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new MuscleOxygenScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\nimport { updateState } from \"./speedCadenceUtils.js\";\nimport { SpeedCadenceScanState } from \"./speedCadenceScanState.js\";\nimport { SpeedCadenceSensor } from \"./speedCadenceSensor.js\";\n\n/**\n * Represents a scanner for Speed and Cadence sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Speed and Cadence sensors.\n *\n * @category Sensors\n */\nexport class SpeedCadenceScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Speed and Cadence sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Speed and Cadence sensors.\n     */\n    protected deviceType(): number {\n        return SpeedCadenceSensor.deviceType;\n    }\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const scanner = new SpeedCadenceScanner();\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * A dictionary to store the states of detected Speed and Cadence sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: SpeedCadenceScanState }}\n     */\n    private states: { [id: number]: SpeedCadenceScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new SpeedCadenceScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\nimport { updateState } from \"./speedUtils.js\";\nimport { SpeedScanState } from \"./speedScanState.js\";\nimport { SpeedSensor } from \"./speedSensor.js\";\n\n/**\n * Represents a scanner for Speed sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Speed sensors.\n *\n * @category Sensors\n */\nexport class SpeedScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Speed sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Speed sensors.\n     */\n    protected deviceType(): number {\n        return SpeedSensor.deviceType;\n    }\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const scanner = new SpeedScanner();\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * A dictionary to store the states of detected Speed sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: SpeedScanState }}\n     */\n    private states: { [id: number]: SpeedScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new SpeedScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\nimport { updateState } from \"./strideSpeedDistanceUtils.js\";\nimport { StrideSpeedDistanceScanState } from \"./strideSpeedDistanceScanState.js\";\nimport { StrideSpeedDistanceSensor } from \"./strideSpeedDistanceSensor.js\";\n\n/**\n * Represents a scanner for Stride-Based Speed and Distance Monitor (SDM) sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple SDM sensors.\n *\n * @category Sensors\n */\nexport class StrideSpeedDistanceScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Stride-Based Speed and Distance Monitor sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for SDM sensors.\n     */\n    protected deviceType(): number {\n        return StrideSpeedDistanceSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected SDM sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: StrideSpeedDistanceScanState }}\n     */\n    private states: { [id: number]: StrideSpeedDistanceScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new StrideSpeedDistanceScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {DataView} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: DataView): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { WebUSBDriver } from \"./driver/webUSBDriver.js\";\n\n/**\n * WebUsbStick class extends the WebUSBDriver to represent a specific USB stick that uses the WebUSB API.\n * It checks for WebUSB API availability in the environment before initializing.\n *\n * @category Drivers\n * @extends WebUSBDriver\n */\nexport class WebUsbStick extends WebUSBDriver {\n    /**\n     * Creates an instance of WebUsbStick.\n     * Throws an error if the WebUSB API is not available in the current environment (e.g., unsupported browsers).\n     *\n     * @throws {Error} If the WebUSB API is not available in the environment.\n     *\n     * @example\n     * try {\n     *   const usbStick = new WebUsbStick();\n     *   // Use usbStick for further operations\n     * } catch (error) {\n     *   console.error(error.message);\n     * }\n     */\n    constructor() {\n        if (typeof navigator === \"undefined\" || typeof navigator.usb === \"undefined\") {\n            throw new Error(\"WebUSB API is not available in this environment.\");\n        }\n\n        super();\n    }\n}\n"],"names":["Constants","MESSAGE_RF","MESSAGE_TX_SYNC","DEFAULT_NETWORK_NUMBER","MESSAGE_CHANNEL_UNASSIGN","MESSAGE_CHANNEL_ASSIGN","MESSAGE_CHANNEL_ID","MESSAGE_CHANNEL_PERIOD","MESSAGE_CHANNEL_SEARCH_TIMEOUT","MESSAGE_CHANNEL_FREQUENCY","MESSAGE_CHANNEL_TX_POWER","MESSAGE_NETWORK_KEY","MESSAGE_TX_POWER","MESSAGE_PROXIMITY_SEARCH","MESSAGE_ENABLE_RX_EXT","MESSAGE_LIB_CONFIG","MESSAGE_CHANNEL_OPEN_RX_SCAN","MESSAGE_STARTUP","MESSAGE_SYSTEM_RESET","MESSAGE_CHANNEL_OPEN","MESSAGE_CHANNEL_CLOSE","MESSAGE_CHANNEL_REQUEST","MESSAGE_CHANNEL_BROADCAST_DATA","MESSAGE_CHANNEL_ACKNOWLEDGED_DATA","MESSAGE_CHANNEL_BURST_DATA","MESSAGE_CHANNEL_EVENT","MESSAGE_CHANNEL_STATUS","MESSAGE_VERSION","MESSAGE_CAPABILITIES","MESSAGE_SERIAL_NUMBER","CHANNEL_TYPE_TWOWAY_RECEIVE","CHANNEL_TYPE_TWOWAY_TRANSMIT","CHANNEL_TYPE_SHARED_RECEIVE","CHANNEL_TYPE_SHARED_TRANSMIT","CHANNEL_TYPE_ONEWAY_RECEIVE","CHANNEL_TYPE_ONEWAY_TRANSMIT","RADIO_TX_POWER_MINUS20DB","RADIO_TX_POWER_MINUS10DB","RADIO_TX_POWER_0DB","RADIO_TX_POWER_PLUS4DB","RESPONSE_NO_ERROR","EVENT_RX_SEARCH_TIMEOUT","EVENT_RX_FAIL","EVENT_TX","EVENT_TRANSFER_RX_FAILED","EVENT_TRANSFER_TX_COMPLETED","EVENT_TRANSFER_TX_FAILED","EVENT_CHANNEL_CLOSED","EVENT_RX_FAIL_GO_TO_SEARCH","EVENT_CHANNEL_COLLISION","EVENT_TRANSFER_TX_START","CHANNEL_IN_WRONG_STATE","CHANNEL_NOT_OPENED","CHANNEL_ID_NOT_SET","CLOSE_ALL_CHANNELS","TRANSFER_IN_PROGRESS","TRANSFER_SEQUENCE_NUMBER_ERROR","TRANSFER_IN_ERROR","MESSAGE_SIZE_EXCEEDS_LIMIT","INVALID_MESSAGE","INVALID_NETWORK_NUMBER","INVALID_LIST_ID","INVALID_SCAN_TX_CHANNEL","INVALID_PARAMETER_PROVIDED","EVENT_QUEUE_OVERFLOW","USB_STRING_WRITE_FAIL","CHANNEL_STATE_UNASSIGNED","CHANNEL_STATE_ASSIGNED","CHANNEL_STATE_SEARCHING","CHANNEL_STATE_TRACKING","CAPABILITIES_NO_RECEIVE_CHANNELS","CAPABILITIES_NO_TRANSMIT_CHANNELS","CAPABILITIES_NO_RECEIVE_MESSAGES","CAPABILITIES_NO_TRANSMIT_MESSAGES","CAPABILITIES_NO_ACKNOWLEDGED_MESSAGES","CAPABILITIES_NO_BURST_MESSAGES","CAPABILITIES_NETWORK_ENABLED","CAPABILITIES_SERIAL_NUMBER_ENABLED","CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED","CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED","CAPABILITIES_SCRIPT_ENABLED","CAPABILITIES_SEARCH_LIST_ENABLED","CAPABILITIES_LED_ENABLED","CAPABILITIES_EXT_MESSAGE_ENABLED","CAPABILITIES_SCAN_MODE_ENABLED","CAPABILITIES_PROX_SEARCH_ENABLED","CAPABILITIES_EXT_ASSIGN_ENABLED","CAPABILITIES_FS_ANTFS_ENABLED","TIMEOUT_NEVER","Messages","resetSystem","payload","push","this","buildMessage","requestMessage","channel","messageId","concat","intToLEHexArray","setNetworkKey","assignChannel","type","Error","setDevice","deviceId","deviceType","transmissionType","searchChannel","timeout","setPeriod","period","setFrequency","frequency","setRxExt","libConfig","how","openRxScan","openChannel","closeChannel","unassignChannel","acknowledgedData","broadcastData","message","length","forEach","byte","getChecksum","Uint8Array","int","numBytes","a","hexString","decimalToHex","i","parseInt","substr","d","numDigits","hex","Number","toString","checksum","BUFFER_INDEX_MSG_LEN","BUFFER_INDEX_MSG_TYPE","BUFFER_INDEX_CHANNEL_NUM","BUFFER_INDEX_MSG_DATA","BUFFER_INDEX_EXT_MSG_BEGIN","NodeUSBDriver","EventEmitter","constructor","idVendor","idProduct","debugOptions","super","detachedKernelDriver","usedChannels","attachedSensors","maxChannels","_canScan","throwLibUSBException","setMaxListeners","usb","setDebugLevel","usbDebugLevel","canAttach","Promise","resolve","canScan","open","devices","getDevices","device","shift","iface","interfaces","isKernelDriverActive","detachKernelDriver","_a","claim","error","errno","LIBUSB_ERROR_ACCESS","LIBUSB_ERROR_NO_DEVICE","LIBUSB_ERROR_BUSY","console","close","undefined","deviceInUse","inEndpoint","endpoints","on","data","onData","catch","err","startPoll","outEndpoint","reset","detachAll","stopPoll","release","attachKernelDriver","_b","emit","devIdx","indexOf","splice","listenerCount","read","dataView","DataView","buffer","getUint8","write","reject","transfer","Buffer","from","attach","sensor","forScan","detach","idx","isPresent","isScanning","getDeviceList","filter","deviceDescriptor","copy","leftover","concatUint8Arrays","len","beginBlock","slice","endBlock","readData","arr1","arr2","result","set","supportHardware","vendorId","productId","WebUSBDriver","abortController","AbortController","signal","navigator","requestDevice","filters","configuration","claimInterface","interfaceNumber","alternate","find","e","direction","readLoop","log","aborted","transferIn","endpointNumber","packetSize","cancelReadLoop","abort","transferOut","nextTick","fn","process","setImmediate","setTimeout","BaseSensor","stick","messageQueue","handleEventMessages","scan","onStatus","status","__awaiter","msg","code","mc","cbk","statusCbk","errorMessage","attachSensor","Array","map","join","decodeDataCbk","send","PageState","updateState","state","page","pageNum","pageState","INIT_PAGE","STD_PAGE","oldPage","EXT_PAGE","OperatingTime","ManId","SerialNumber","DeviceId","getUint16","HwVersion","SwVersion","ModelNum","PreviousBeat","IntervalAverage","IntervalMax","SessionAverage","SupportedFeatures","EnabledFeatures","batteryLevel","batteryFrac","batteryStatus","BatteryLevel","BatteryVoltage","batteryFlags","BatteryStatusBit","BatteryStatus","pucPayload","BeatTime","BeatCount","ComputedHeartRate","DecodeDefaultHRM","HeartRateSensorState","HeartRateScanState","AntPlusBaseSensor","_super","call","AntPlusSensor","decodeData","bind","HeartRateSensor","AntPlusScanner","byteLength","bytesArray","byteOffset","createStateIfNew","rssi","getInt8","threshold","updateRssiAndThreshold","TimeFractional","TimeInteger","DistanceInteger","DistanceFractional","SpeedInteger","SpeedFractional","StrideCount","UpdateLatency","CadenceInteger","CadenceFractional","Status","Calories","StrideSpeedDistanceSensorState","StrideSpeedDistanceScanState","StrideSpeedDistanceSensor","oldCadenceTime","CadenceEventTime","oldCadenceCount","CumulativeCadenceRevolutionCount","oldSpeedTime","_c","SpeedEventTime","oldSpeedCount","_d","CumulativeSpeedRevolutionCount","cadenceTime","cadenceCount","speedEventTime","speedRevolutionCount","cadence","isNaN","CalculatedCadence","distance","wheelCircumference","CalculatedDistance","speed","CalculatedSpeed","SpeedCadenceSensorState","SpeedCadenceScanState","SpeedCadenceSensor","setWheelCircumference","Motion","SpeedSensorState","SpeedScanState","SpeedSensor","CadenceSensorState","CadenceScanState","CadenceSensor","offset","pedalPower","PedalPower","RightPedalPower","LeftPedalPower","Cadence","AccumulatedPower","Power","oldEventCount","EventCount","oldTimeStamp","TimeStamp","oldTorqueTicksStamp","TorqueTicksStamp","eventCount","slope","timeStamp","torqueTicksStamp","Slope","elapsedTime","torqueTicks","cadencePeriod","Math","round","torque","CalculatedTorque","CalculatedPower","PI","BicyclePowerSensorState","BicyclePowerScanState","BicyclePowerSensor","resetState","ElapsedTime","Distance","RealSpeed","VirtualSpeed","HeartRate","HeartRateSource","CycleLength","Incline","Resistance","METs","CaloricBurnRate","_EventCount0x19","_EventCount0x1A","InstantaneousPower","AveragePower","TrainerStatus","TargetStatus","AscendedDistance","DescendedDistance","Strides","Strokes","WheelTicks","WheelPeriod","Torque","temperature","Temperature","calBF","ZeroOffset","SpinDownTime","EquipmentType","heartRate","capStateBF","oldElapsedTime","oldDistance","State","cycleLen","incline","resistance","mets","caloricbr","calories","negDistance","posDistance","flagStateBF","oldNegDistance","oldPosDistance","strides","power","oldStrides","strokes","oldStrokes","accPower","trainerStatus","oldAccPower","wheelTicks","accWheelPeriod","accTorque","oldWheelTicks","oldWheelPeriod","oldTorque","swRevSup","swRevMain","serial","getUint32","tot","chState","devId","devType","PairedDevices","id","paired","FitnessEquipmentSensorState","FitnessEquipmentScanState","FitnessEquipmentSensor","setUserConfigurationInternal","userWeight","bikeWeight","wheelDiameter","gearRatio","m","max","min","df","mb","setUserConfiguration","userWeightOrCallback","setBasicResistance","setTargetPower","p","setWindResistanceInternal","windCoeff","windSpeed","draftFactor","setWindResistance","windCoeffOrCallback","setTrackResistanceInternal","rollingResistanceCoeff","s","setTrackResistance","slopeOrCallback","_EventCount","notifications","capabilities","total","previous","current","UTCTimeRequired","SupportANTFS","MeasurementInterval","TotalHemoglobinConcentration","PreviousSaturatedHemoglobinPercentage","CurrentSaturatedHemoglobinPercentage","operatingTime","MuscleOxygenSensorState","MuscleOxygenScanState","MuscleOxygenSensor","_sendTimeCmd","cmd","now","Date","utc","getTime","UTC","getTimezoneOffset","setUTCTime","startSession","stopSession","setLap","getInt16","EnvironmentSensorState","EnvironmentScanState","EnvironmentSensor","states","Rssi","Threshold","pages"],"mappings":"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"}